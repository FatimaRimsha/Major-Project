Hi i'm carrie anne and welcome to crash course computer science today we start our journey up the ladder of abstraction where we leave behind the simplicity of being able to see every switch in gear but gain the ability to assemble increasingly complex systems last episode we talked about how computers evolved from electro mechanical devices. That often had decimal representations of numbers like those represented by teeth on a gear to electronic computers with transistors that can turn the flow of electricity on or off unfortunately even with just two states of electricity we can represent important information we call this representation binary which literally means of two states in the same way a bicycle has two wheels or a biped has two legs you might think two states isn't a lot to work with and you'd be right but it's exactly what you need for representing the values true and false. So a computer is an on state when electricity is flowing represents true the off state no electricity flowing represents false we can also write binary as ones and zeros instead of trues and forces they are just different expressions of the same signal but we'll talk about that in the next episode now it is actually possible to use transistors for more than just turning electrical current on and off and to allow for different levels of current some early electronic computers were ternary that's three states and even binary using five states the problem is the more intermediate states there are. The harder it is to keep them all separate if your smartphone battery starts running low or there's electrical noise because someone's running a microwave nearby the signals can get mixed up and this problem only gets worse with transistors changing states millions of times per second so placing two signals as far apart as possible using just on and off gives us the most distinct signal to minimize these issues another reason computers use binary is that an entire branch of mathematics already existed that dealt exclusively with true and false values and it had figured out all the necessary rules. And operations for manipulating them it's called boolean algebra george bull from which boolean algebra later got its name was a self taught english mathematician in the 1800s he was interested in representing logical statements that went under over and beyond aristotle approach to logic which was unsurprisingly grounded in philosophy bulls approach allowed truth to be systematically and formally proven through logic equations which he introduced in his first book the mathematical analysis of logic in 1847 in regular algebra the type you probably learned in. High school the values of variables are numbers and operations on those numbers are things like addition and multiplication but in boolean algebra the values of variables are true and false and the operations are logical there are three fundamental operations in boolean algebra a not an and and an or operation and these operations turn out to be really useful so we're going to look at them individually a not takes a single boolean value either true or false and negates it it flips true to false and false to true we can write out a little logic table that shows. The original value under input and the outcome after applying the operation under output now here's the cool part we can easily build boolean logic out of transistors as we discussed last episode transistors are really just electrically controlled switches they have three wires two electrodes and one control wire when you apply electricity to the control wire it lets current flow through from one electrode through the transistor to the other electrode this is a lot like a spigot on a pipe open the tap water flows close the tap water shuts off. Think of the control wire as an input and the wire coming from the bottom electrode as the output so with a single transistor we have one input and one output if we turn the input on the output is also on because the current can flow through it if we turn the input off the output is also off and the current can no longer pass through or in boolean terms when the input is true the output is true and when the input is false the output is also false which again we can show on a logic table this isn't a very exciting circuit though because it's not doing anything the input and output are the same. But we can modify this circuit just a little bit to create a knot instead of having the output wire at the end of the transistor we can move it before if we turn the input on the transistor allows current to pass through it to the ground and the output wire won't receive that current so it will be off in our water metaphor grounding would be like if all the water in your house was flowing out of a huge hose so there wasn't any water pressure left for your shower so in this case if the input is on output is off when we turn off the transistor though current is prevented from flowing down it to the ground so instead current. So the input will be off and the output will be on and this matches our logic table for not so congrats we just built a circuit that computes not we call them not gates and we call them gates because they're controlling the path of our current the and boolean operation takes two inputs but still has a single output in this case the output is only true if both inputs are true think about it like telling the truth you're only being completely honest if you don't lie even a little for example let's take the statement. Both of those facts are true so the whole statement is true but if i said my name is carrie anne and i'm wearing pants that would be false because i'm not wearing pants or trousers if you're in england the carrie anne part is true but a true and a false is still false if i were to reverse that statement it would still obviously be false and if i were to tell you two complete lies that is also false and again we can write all of these combinations out in a table. Two inputs and one output if we turn on just transistor a current won't flow because the current is stopped by transistor a alternatively if transistor a is on but transistor a is off same thing the current can't get through only if transistor a and transistor a are on does the output wire have current the last boolean operator is or where only one input has to be true for the output to be true for example my name is margaret hamilton or i'm wearing a blue dress this is a true statement because although i'm not margaret hamilton unfortunately. And i'm wearing a blue dress so the overall statement is true an or statement is also true if both facts are true the only time an or statement is false is if both inputs are false building an or gate from transistors needs a few extra wires instead of having two transistors in series one after the other we have them in parallel we run wires from the current source to both transistors we use this little arc to note that the wires jump over one another and aren't connected even though they look like they cross. To the output so the output is also off now if we turn on just transistor a current can flow to the output same thing if transistor a is off but transistor a is on basically if a or a is on the output is also on also if both transistors are on the output is still on okay now we've got not and and or gates and we can leave behind their constituent transistors and move up a layer of abstraction the standard engineers used for these gates are a triangle with a dot for a not a a for the and and a. For the or those aren't the official names but that's how i like to think of them representing them and thinking about them this way allows us to build even bigger components while keeping the overall complexity relatively the same just remember that all of the mess of transistors and wires is still there for example another useful boolean operation in computation is called an exclusive or or xor for short xor is like a regular or but with one difference if both inputs are true the xor is false the only time an xor is true is when one input is true and the other. Other input is false it's like when you go out to dinner and your meal comes with a side salad or a soup sadly you can't have both and building this from transistors is pretty confusing but we could show how an xor is created from our three basic boolean gates we know we have two inputs again a and a and one output let's start with an or gate since the logic table looks almost identical to an or there's only one problem when a and a are true the logic is different from or and we need to output false to do this we need to add some additional gates. And. Very useful component and we'll get to it in another episode so useful in fact engineers gave it its own symbol too an or gate with a smile but most importantly we can now put xor into our metaphorical toolbox and not have to worry about the individual logic gates that make it up or the transistors that make up those gates or how electrons are flowing through a semiconductor moving up another layer of abstraction when computer engineers are designing processors they rarely work at the transistor level and instead work with much larger blocks like logic gates and even larger components made up of logic gates. Which we'll discuss in future episodes and even if you are a professional computer programmer it's not often that you think about how the logic that you are programming is actually implemented in the physical world by these teeny tiny components we've also moved from thinking about raw electrical signals to our first representation of data true and false and we've even gotten a little taste of computation with just the logic gates in this episode we could build a machine that evaluates complex logic statements like if name is john green and after 5pm or is weekend and near percussive. Pizza hut then john will want pizza equals true and with that i'm starving i'll see you next week crash course computer science is produced in association with pcs digital studios at their channel you can check out a playlist of shows like gross science as reactions and the art assignment this episode was filmed at the chad and stacey mig hold studio in indianapolis indiana and it was made with the help of all these nice people and our wonderful graphics team thought cafe thanks for watching and try turning it off and then back on again. You