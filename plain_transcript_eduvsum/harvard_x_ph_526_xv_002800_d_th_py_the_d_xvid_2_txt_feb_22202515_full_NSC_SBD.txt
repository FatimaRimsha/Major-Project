Dictionaries are mappings from key objects to value objects dictionaries consists of key value pairs where the keys must be immutable and the values can be anything dictionaries themselves are immutable so this means once you've created your dictionary you can modify its contents on the fly dictionaries can be used for performing. Very fast lookup on unordered data a key aspect to be aware about regarding dictionaries is that they are not sequences and therefore do not maintain any type of left right order this means that if you're looping over a dictionary the key value pairs will be iterated over in an arbitrary order let's look at a diagram to clarify this idea we're going to set up a simple dictionary where we have our first key. That's associated with a value object we have our second key that goes with another object and let's say we have key number 4 here which goes with the corresponding value object if this is a dictionary this key object will always be associated with this value object similarly this key will always go with this value object when we say that dictionaries don't maintain any type of left or right order. Is that the ordering of these key value pairs themselves is not defined that means if i'm looping over these pairs i might first get the pair that corresponds to my second key here let's then look at some uses of dictionaries i would like to set up a dictionary which is called age and if i want this to be an empty dictionary i have two ways to construct that the first approach is just to use a pair of curly pairs. Braces and this would give me a dictionary age which would be empty at the time of construction another possibility is to type age is equal to dict which is a keyword open and close parentheses and again i have created an empty dictionary let's then construct a dictionary that consists of names and ages in this particular dictionary the names are going to be the keys and the ages are going to be the value objects. Imagine the first task we'd like to do is look up a persons age we do this using the following syntax we first type the name of the dictionary we then follow the square brackets inside the square brackets we insert the key we're interested in looking up let's say in this case we'd like to know how old is pam so we'd enter pam inside the square brackets and python returns the result to us. The value objects that are associated with specific keys let's say we would like to increase the age of tim by one year here is how we could do this we first take our age dictionary we'd like to modify tim and let's say we want to increase his age by one year we could use the following kind of syntax we could say age of tim is equal to age of tim plus one and this certainly works. However incrementing the value of an object by one or by some other number is a very common operation and there's a very handy shorthand notation for doing that in python so let's take the age of tim and say we would like to increase that by one year we can do the following we can just type plus equals one and what happens if we check the age of tim we will have increased tim age again. By one year let's make sure we understand what happens when we say plus equals when you're reading code from left to right the plus operation happens first then we have the equals sign which means assignment so when we say something plus equals 1 for example we first take the value of the object we add 1 to that object and then we reassign it back to the original object a common mistake is something. Sometimes to mix up the order of these two operations but think about what happens if you say a equals plus 1 you're not increment the value of a by 1 instead you're saying that a should be assigned the value of plus 1 which is just the same thing as saying a is equal to 1 if you wish to increment the value of a variable by 1 you first do the incr mentation and then the assignment that's why the order of these two operations is plus 1. And then equals you can use the dictionary method keys to find out what are all the keys in the dictionary and similarly you can use the values method to find out what are all of the values in the dictionary when you call these methods python returns to you an object which has a very special type the type of the returned object is what's called a view object view objects do precisely what you might imagine that they do. Do they provide a dynamic view of the keys or values in the dictionary a key point here is that as you update or modify your dictionary the views will also change correspondingly let's now work with the dictionary that we just defined we're going to first extract all of the names in the dictionary so i'll do that by saying names equals a keys now let's just check the type of. Of the object names and python confirms that this is a dictionary keys object let's say i would like to add a new key to my dictionary let's add a person called tom who is 50 in our dictionary so we say a square brackets tom and we assign the value object 50 to that key if we now ask what are the names. You'll see that the view object also contains tom we didn't redefine the contents of names and this is the nature of view object as we modify the dictionary the contents of the view object will change automatically let's look at the values method so if we say age values python returns to us all of the values in the dictionary i'm going to call this ages. And we can look at that object so in this case we have one two three four five different ages contained in the dictionary i'm going to add one more person to the dictionary let's call that person nick and let's say nick is 31 years old if i now ask python what are the names you'll see that the name nick is also contained in the names object this is the nature of view objects. So let's see how we test for membership in a dictionary we know that we have a key tom in our dictionary if i want to ask if tom is a member of our dictionary if tom is a key in our dictionary i can ask tom in age and the answer is going to be true if i ask if sofia in our dictionary python is going to say. Say false this is how we test for object membership in a dictionary