Numbers are one type of object in python and python in fact provides three different numeric types these are called integers floating point numbers and complex numbers one of the interesting things about python integers is that they have unlimited precision that means your integer will never be too long to fit into pythons integer type. Another important aspect to realize about numbers is that you can freely mix different numeric types all python numbers support all the usual arithmetic operations and let's try a few of them out right now the basics like addition and multiplication are of course easy we can also raise a number to a power and you'll see that if we increase the exponent a little bit the result is going to be a very large number but that's not going to be. A problem again python has unlimited precision for integers let's try out division division is accomplished using the slash so for example if we say 6 divided by 7 python gives us the floating point answer sometimes however we might want to do what's called floor division or integer division this is accomplished by using two slash signs in this case let's do something like 15 divided by 7. By seven which in the floating point is 2 14 if we use integer division python is going to give us an answer of two so what happened here is the following python carries out the division as usual and that gives us a number 2 14 it then rounds that number to the closest integer which is less than the actual floating point answer so 2 14 a floating point number gets rounded down to the closer. Smaller integer which is 2 the interactive mode in python provides a very useful operation which is the underscore operator and the value of the underscore operator is always the last object that python has returned to you so let's see what that means let's do a simple division 15 divided by 2 3 say python tells us that it's 6 521 and so on now if i hit underscore. Python is returning the value of the latest operation say i wanted to multiply this number with 2 3 which would give me back the number 15 so i can do that in the following way i just take the underscore i multiply that by 2 3 and the answer is 15 this is especially handy in the interactive mode if you'd like to change a few calculations so let's try one example let's first start with 10 times 2 that's 20. Let's take that number let's add 5 to it and let's then take that number 25 and raise that to the second power in this case the answer is 625 very commonly we need to go beyond the built in functions and operations that python provides and one way to do this for numbers is to use the match module which contains some basic mathematical operations like the factorial. Let's just quickly remind ourselves what is the factorial operation so the factorial of a indicated by exclamation mark is a times a minus 1 all the way times 2 times 1 so for example 3 factorial would be equal to 3 times 2 times 1 which is 6 now the question is how could we implement this simple calculation in python. Let's start by importing the match module so we type import match and the function we're interested in is match factorial so the argument in this case would be 3 and python tells us 3 factorial is equal to 6