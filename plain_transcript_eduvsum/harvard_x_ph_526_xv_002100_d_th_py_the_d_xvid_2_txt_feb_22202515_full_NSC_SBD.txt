Expressions is a combination of objects and operators that computes a value many expressions involve what is known as the boolean data type objects of the boolean type have only two values these are called true and false in python you need to capitalize these words true and false for python to understand. So let's just check very quickly if we type true python tells us this is a boolean object or if we ask python what is the type of false with of capitalized python tells us this is a boolean object note that if i don't capitalize false python doesn't know what this object is it doesn't understand that so you need to be sure to capitalize your boolean object. So let's try these out let's start with or or between a and a is going to be true if either a is true or a is true or both are true so for example if you have a function that is true you can do that or if you have a function that is true you can do that or if you have a function that is true you can do that or if you have a function that is true you can do that. If we say true or false python returns true true or true would also be true so the only time or would be false if both the first and second object surrounding or are false and it's only true if both objects are true so if we type true and true the answer is going to be true however if we turn the second true. So in order for an to be true both of the objects need to be true finally we have the not operation which simply negates the value of the object so if we say not true python gives us false and if we say not false python returns to us true we often need to compare objects in our programs. A total of eight different comparison operations in python although these are commonly used for numeric types we can actually apply them to other types as well for example if you're comparing two sequences the comparison is carried out element wise so you're comparing the first element in your first sequence to your first element in your second sequence and so on the result of a comparison like this is always a boolean type either true or false. It's perhaps easiest to understand these comparisons through a simple example that involves numbers so let's try out a couple of them let's say we're comparing two numbers we might ask python is two less than four python returns true to us we can also ask is two less than or equal to say two and in this case the answer is again true we can test for equality by using two. Equals signs 2 is equal to 2 so python returns true to us and finally we can ask are two objects not equal to one another by using the exclamation mark or exclamation point in this case the answer is false because 2 is equal to 2 these two comparisons are used to test whether two objects are the one and the same notice that this is different than asking if the contents of two objects are. Are the same so let's see what this implies using a little bit of code we could ask python if the list that contains numbers 2 and 3 is the same as the list containing numbers 3 and 3 the answer is of course false in this case if we modify the second list now both lists have the numbers 2 and 3 in them the answer is going to be true the lists are identical in content however if we wanted to ask. If the first list is the same object as the second list we would use the is comparison and python tells us that this is false if we'd like to know if the first list is not the same object as the second list we can use the is not operation and in this case python returns true so we actually have two lists here they happen to have the same contents but we do have two objects. These comparison returns false how would we test a quality of two numbers that are a floating point number and an integer so we can see how testing if 2 0 is equal to 2 0 returns true but what happens if we ask python is 2 0 equal to 2 in this case 2 0 is a floating point number whereas 2 is an integer what happens in this situation is the following python takes. The second number which is number two an integer it turns that into a floating point number the floating point representation of the integer two is 2 0 so now we're comparing implicitly 2 0 to 2 0 therefore the answer is going to be true