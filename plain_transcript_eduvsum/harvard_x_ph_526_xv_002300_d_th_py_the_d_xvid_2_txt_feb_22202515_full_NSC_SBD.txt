You would typically wrap all of those objects within a single tuple object and then return that tuple let's now take a look at some of the basic operations that we can do using tuples i'm first going to construct a tuple i'm going to just call it capital to and let's just put in a few numbers in my tuple let's say 1 3 5 and 7 again tuples are a type of sequence so if i wanted to know how many objects i have in my tuple. I can use the len function i can also concatenate tuples so i can do something like to plus i need a new tuple here let's say 9 and 11 and in this case python returns a new tuple to me where the two tuples have been put together because tuples are sequences the way you access different objects within a tuple is by their position so if i wanted to access. The second object in my tuple i would type capital to square bracket and 1 and remember using position 1 is going to give me the second object in that tuple because indices in python start at 0 another operation that you need to be familiar with is how to pack and unpack tuples imagine i have two numbers two variables a and a let's just quickly create them let's say a is equal to this. A is equal to this imagine if i wanted to construct a tuple object we could think of these two numbers a and a as coordinates so i could do something like this i could define my coordinate as a tuple which consists of two objects a and a if i now ask python what is the type of my coordinate object python will tell me that's a tuple this operation is called packing. A tuple or tuple packing another related operation is how you unpack a tuple our coordinate contains two numbers our coordinate object is a tuple here is how you can unpack this tuple let's say i would like to unpack that into two numbers say c1 and c2 perhaps short for coordinate one and coordinate two i can just write c1 and c2 as a tuple and then i can assign coordinate. Into that tuple if i now look at the values of c1 and c2 i'll observe the following c1 contains the first object in that tuple where c2 contains the second object of the tuple we can also use tuples in for loops which is extremely handy let's say i've created multiple coordinates so in this case my object coordinates is a list which consists of tuples where each tuple consists. Of two numbers what if i wanted to loop over these objects in say a for loop then i can do the following i can call these coordinate pairs a and a let me enclose these in parentheses here in coordinates and i can ask python to print the value of a and a so this is what's happening here coordinates is a list of tuples in my for loop. I'm going over that container that sequence of coordinates one at a time the key part to focus here is how i unpack the tuples from my list of tuples so the syntax is for by in coordinates in other words i'm unpacking the tuples within the coordinates list one at a time one more thing about unpacking tuples in a loop i don't necessarily need the parentheses surrounding a and a. So i can also just type for by in coordinates and then i just have the same print function this also works however sometimes having the extra parentheses around the tuple will make it clearer to you that you are dealing with a tuple object it's relatively easy to understand how to construct and deal with tuples that contain multiple objects but what if you just have one object within your tuple let's experiment with that first. With a tuple where we have two objects say two and three we know that this is a tuple from the way we constructed it we can also ask python to return to us the type of the object which we now happen to call a if i wanted to construct a new tuple with just one object in it you might guess that we could just use the following structure we could just type a is equal to parentheses and we put the one number. The same brain there however if we ask python now what is the type of this object it's not actually a tuple if we check the type of this object by typing type parentheses a python is telling us that a is actually an integer but this is not what we wanted we wanted to have a tuple object that contains just one object this is where the syntax is a little bit counterintuitive to construct a tuple with just one object. We have to use the following syntax we start by saying a is equal to we put our tuple parentheses we put in our number two and we add the comma when we now ask python what type of object is a we know that this is a tuple finally if you want you can also omit the parentheses this also works but the code is not quite as clear that's why i recommend using parentheses. Whenever you're using a top bowl