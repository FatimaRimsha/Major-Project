All right so bubble sort is an algorithm we can use to sort a set of elements let's take a look at how it works so the basic idea behind bubble sort is this we want to move higher valued elements generally to the right and lower valued elements generally to the left as we would expect we want the lower things to be at the beginning and the higher things to be at the end how do we do this well in pseudo code we could say let's set a swap counter to a non zero. Value we'll see why we do that in a second and then we repeat the following process until the swap counter is zero or until we make no swaps at all reset the swap counter to zero if it's not already zero then look at every adjacent pair of elements if those two elements are not in order swap them and add one to the swap counter if you're thinking about this before we visualize it notice that this will move lower valued elements to the left and higher valued elements to the right effectively doing. And what we want to do which is move those groups of elements in that way let's visualize how this might look using our array that we use to test out these algorithms we have an unsorted array here again indicated by all of the elements being in red and i set my swap counter to a non zero value i arbitrarily chose negative 1 it's not 0 we want to repeat this process until the swap counter is 0 this is why i set my swap counter to some non zero value because otherwise the swap counter would be 0. We can begin the process of the algorithm so again the steps are reset the swap counter to zero then look at every adjacent pair and if they're out of order swap them and add one to the swap counter so let's begin this process so the first thing we do is we set the swap counter to zero and then we start looking at each adjacent pair so we first start looking at 5 and 2 we see that they are out of order and so we swap them and we add one to the swap counter so now our swap counter is 1 and 2 and 5 have been switched now we repeat the process again. Next adjacent pair 5 and 1 they're also out of order so we swap them and add 1 to the swap counter then we look at 5 and 3 they are out of order so we swap them and we add 1 to the swap counter then we look at 5 and 6 they're in order so we don't actually need to swap anything this time then we look at 6 and 4 they are also out of order so we swap them and we add 1 to the swap counter now notice what's happened we've moved 6 all the way to the end. So in selection sort if you've seen that video what we did was we ended up moving the smallest elements and building the sorted array essentially from left to right smallest to largest in the case of bubble sort if we're following this particular algorithm we're actually going to be building the sorted array from right to left largest to smallest we have effectively bubbled six the largest value all the way to the end and so we can now declare that that is sorted and in future iterations going through the array again we don't have to. We can only have to consider the unsorted elements when we're looking at adjacent pairs so we have finished one pass through bubble sort so now we go back to the question repeat until the swap counter is 0 well the swap counter is 4 so we're going to keep repeating this process again we're going to reset the swap counter to 0 and look at each adjacent pair so we start with 2 and 1 they're out of order so we swap them and we add 1 to the swap counter 2 and 3 they're in order we don't need to do anything 3 and 5 are in order we don't need to do anything there. 5 and 4 they are out of order and so we need to swap them and add 1 to the swap counter and now we've moved 5 the next largest element to the end of the unsorted portion so we can now call that part of the sorted portion now you're looking at the screen and probably can tell as can i that the array is sorted right now but we can't prove that yet we don't have a guarantee that it's sorted but this is where the swap counter is going to come into play so we've completed a pass. To. Of sorts that we computer scientists love is we can now declare the entire array must be sorted because we didn't have to swap any elements so that's pretty nice so what's the worst case scenario with bubble sort in the worst case the array is in completely reverse order and so we have to bubble each of the large elements all the way across the array and we effectively also have to bubble all the small elements back all the way across the array too so each of then elements has to move across. All of the other a elements so that's the worst case scenario in the best case scenario though this is slightly different from selection sort the array is already sorted when we go in we don't have to make any swaps on the first pass so we might have to look at fewer elements right we don't have to repeat this process a number of times over so what does that mean so what's the worst case scenario for bubble sort and what's the best case scenario for bubble sort did you guess this in the worst case you have to iterate across all. All of then elements a times so the worst case is a squared if the array is perfectly sorted though you only have to look at each of the elements once and then if the swap counter is still 0 you can say this array is sorted and so in the best case this is actually better than selection sort it's omega of a i'm doug lloyd this is cs50