Of well hello one and all and welcome to cs50's very first section my name is carter bank one of the courses preceptors here on campus and the goal of sections is to help you bridge the gap between lectures and problem sets so let's say there's something in the lecture that you think you might have understood but now it's your turn to try to put that idea into practice actually writing some code along the way that is the goal of these sections here. On our very first week in cs50 week one we're moving from scratch into learning this language called a that you use to build increasingly complex programs so again my name is carter zane if you'd like to reach out to me at any time after this section or while you're taking cs50x online you can reach out to me here at this email carter at cs50 harvard eds but what's on the agenda today so today we have a few different things from lecture we have this idea of variables and types. How we store information inside of our programs we also have an idea of taking input from the user and trying to print some of those values back out to the user as they use our program later on we'll see these ideas of functions and loops and conditionals allowing us to design ever more complex programs and finally towards the end we'll work a bit on those very first steps in problem set one to help you get started and go on your way to completing that very first problem set. So let's dive in here into our first topic this one called variables and types so as we said before a variable is simply some way of storing information inside of a computer but i'm curious for those of you who are here how would you describe a variable in a single sentence let's say we have a contact application we're trying to store information about let's say different people we're in contact with how would you describe what a variable is. Is in a single sentence i'm seeing a container certainly that's a good idea a variable is a container for some value it could hold some piece of information like a number or a character and the other idea is too containers something like a group i think that idea could work it's something like trying to put some piece of data like a number or a character or even some word into a particular container maybe something we could call a group. And often if i could add on to these idea is giving it some name so i see someone else in the chat has said it's a name given to some value so often we'll have these containers that will have some values inside of them and a variable allows us to give that value a name so visually you could think of a variable a bit like this let's say we have a container represented by this black box here and inside is some value like this value 0 but it's not quite a variable yet. So we can say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let's say let. I've called her so i've called her currently zero times but let's say i call her that value gets updated from zero now to one it could also be two later on in time maybe three or so on we could think of this variable as a name for a value that can change in this case our variable is named calls and it has this value first zero then one then two then three that is changing over time so this works visually. Also some syntax we can use in this new language called a to actually give us this variable give us this value in memory in our computer and syntax as you'll learn is simply the characters we type to write some a code and tell our computer what to do so in this case if we wanted to have this variable called calls we'd simply write something a bit like this we'd say int calls equals 3. And i'm curious for those of you in the room who maybe have seen this from lecture what are the three parts you notice inside of this syntax here what parts do you notice here i'm seeing a type some name for the variable maybe its value and i think we're onto something here so if we break this down just a little bit we're going to have to do a couple of things. So if we look at the smaller pieces this single line of syntax we'll see there are at least three important parts to it so the first part is the name for the variable what are we going to call this place in memory that now has this value 3 well as we see on the right we have this container that has the value 3 and up above it has this name called calls so we can say that when we type int calls equals 3 we're telling our computer that this variable is named calls now there's one more piece also the type as somebody else says. So here we say what kind of value does this container store we've given it a name called calls but then we have to define what kind of value could i put in this container is it going to be maybe a character or an integer or a whole number or something else entirely that's the type of this variable and we often define that upfront up first even before the variable name and then finally as somebody else pointed out here we have the actual value. For this variable in this case the value 3 now there is still one piece of syntax actually maybe two we haven't quite talked about yet we've seen the type the name of this variable and the value but what have we not talked about yet in this syntax seeing that equal sign so this equal sign we haven't yet touched on but it does have a special name it's probably less so an equal sign and more so what we'd call. And we're going to assign the value of that container to be equal to 3 so difference between equals and the assignment operator here and if we wanted to read this in terms of just plain old english we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something like this and we could do something. So a bit like this we could say we're going to create an integer named calls that gets the value 3 so now that we've seen this overview of variables and in this case types as well i want to ask you a question let's say i give you this variable here a variable called country code and it looks a bit like this on the right i'm curious how would you read the code on the left hand side. In plain english based on what we saw before how might you read the code on the left hand side what exactly are we doing here so i'm seeing a few folks saying something a bit like this so if we had this syntax on the left hand side we could read it exactly as follows we could say we're going to create an integer that is named country code and that container that is an integer called country code that will. At the value of 65 and if you're curious here country code refers to a cell phone number or a regular phone number where often if you're calling somebody outside of your own home country you prepend some number like for the united states it's the number 1 for i believe singapore it is the number 65 in this case so if you wanted to call somebody in singapore you'd call them using this country code 65 and then add their phone number right afterwards. One question we often get is why do we begin all of these statements about variables with this type like here we have int and it's the very first thing we say when we declare or initialize some variable but why and i'm curious about your idea for this too feel free to chime in why do you think the very first thing we write is the type of this variable why do we even care about types why do we even have them in this case. Give you a minute to think here why do we care about types so i'm seeing a few ideas so someone says that it will determine what we can make the variable do or what aspect it possesses i like that idea so certainly we can do some things with numbers like add them up for instance that we couldn't do with characters someone else says it tells us how to handle that. That value in memory that's also a good idea so you could think of perhaps maybe different numbers and characters are represented differently underneath the hood inside of our computer as we saw in lecture for instance the letter a corresponds to the number 65 which in binary is something like well i don't know the exact binary but it represents something it tells us how to represent that character in memory other ideas here too. To reserve enough space to store that data type that's also a good idea as well so why don't we give a bit of a concrete example as to why we really care about these types so here i'm trying to store this value 65 as part of this variable called country code but as we just discussed everything in our computer is stored in terms of zeros and ones these little bits that we can use to represent all kinds of things and for the decimal number 65 well if we wanted to represent. And binary it would be exactly this 0 1 0 0 0 0 0 1 this is the binary what our computer is actually storing to represent that number 65 so underneath the hood we could kind of see it like this we have this value the decimal number 65 and our computer is actually storing what you see underneath 0 1 0 0 0 1 and so on but let's say we actually change the type of value. This variable from an int instead to what we call a char or a character here we're representing not 65 but now the letter a anyone else have an idea of why if we change the type from an int to type char we get a instead any ideas so i'm seeing somebody in the chat saying we learned from lecture this idea of as ii the emissive. American standard code for information interchange and the as ii folks they decided that that decimal number 65 when you want to think of that value as instead a character it represents the letter a so here with this code on the left hand side i'm saying let's store that decimal value 65 but treat it as a character and if we're say we're representing a character well i'm not going to get that decimal number anymore i'm going to get the actual character represented by that decimal number. Which in this case is a as we'll see later on in the course these decisions about types actually influence how much memory we're going to use and how we actually store the data on our computer underneath the hood so more on types a bit later but let's keep going here and let's see what we can do that's more interesting than just focusing on single pieces of variables like single variables themselves we could also try to add things up or change variables over time and there's a few operators you might want to know to. To actually do that kind of work so for instance here are a few of them we have this variable now called calls and we're setting it to that value 4 but let's say later on i want to add 2 to that value i could use this operator here that plus sign to say take calls add 2 to it and reassign it to that container that we called calls and then later in my program maybe i could subtract from calls i could say well let's make calls 1 less than what it calls. Currently is to do that i could say let's take calls subtract 1 and then reassign it back to that variable called calls and so on for multiplication here on that fourth line and division on that fifth line so multiplication using our star and division using our slash but there's an even shorter way to do much of this in a this language we're currently using there's this thing called syntactic sugar we could use to actually shorten these lines. Operators plus minus star the slash for division here and i could append an equal sign of it like this i could say calls plus equals 2 calls minus equals 1 and then a shorthand for saying calls equals calls plus 2 or calls equals calls minus 1 just kind of a way to update that value in place over time so i'm curious here if you were to walk through this. Step by step what do you think the value of calls would be we have some code on the left hand side if you pause the video take a moment what would be the value of calls so i'm seeing 5 and i believe that is correct so we'll start with 4 here and we're going to add 2 so 4 plus 2 is 6 minus 1 is 5 multiply that by 2 that's 10 divide it by 2 that's back to being 5. So you're correct calls in this case would be 5 now here's a different kind of question let's say we take a look at this so again calls here is 5 let's say we take a look at this next set on the left hand side what would be the value of calls now here again is our code what would be the value of calls. Now i'm seeing a few options so i'm seeing 4 5 and i'm seeing 4 and i'll ask you which one of those do you think is correct 4 or 4 5 so let's go walk through this step by step we have calls first being 4 we'll add 1 which makes it 5 subtract 2 which makes it 3 multiply that by 3 which is now 9 because 3 times 3 is 9. And technically if you were doing it on your own head you might think well 9 divided by 2 that's 4 5 but actually it'll be 4 in the end and i'm curious why do you think it will be 4 i'm seeing somebody saying that it's 4 because we're storing an integer and you're correct so calls here up front we said call is going to be an integer there is a whole number and if we take 9 and divide it by 4. It by 2 we get this decimal number 4 5 also called a floating point number but because calls is strictly an integer it can't store 4 5 so what will happen instead in a we'll simply do what we call truncating that value we'll say we have 4 5 there is some decimal value after that decimal point but we're going to simply get rid of it not care about it and take whatever whole number we see up front. So if our calculations yielded 4 1 what would we get well just 4 if we even had 4 8 we'd get simply 4 so to be clear it's not rounding but it is truncating taking off that last bit of the decimal place there so i'm curious now what questions do we have about variables about assignment about updating them over time any questions we can take while we're here live. And feel free to write those questions in the chat for those of you who are here of not seeing too many questions which maybe is a good sign but certainly if you're free to ask if you're watching this recording ask a friend ask online and see if it's communities certainly get those questions answered for you now we'll continue here and try to do something a little more interesting. With our variables i think what we'll do is think about how to take input from the user and then print that input back out to the user so we'll talk about input now and printing well one of the first things you might want to do is get input from your users if you're running some program you want them to control how that program is actually working so there are a few ways at least in cs50 and in a in general to get input from your user let's say i want to in this case get. Input from the user that will tell me what should the value of calls be well in cs50 you'll have access to this function called get underscore int and there's a few pieces here get underscore int takes this argument this input called calls in this case calls colon followed by a space and you'll see that separated by quotes here and moreover that then is surrounded by these parentheses that tell us this is the input to this function that we're going. To call calls so there's a few things to keep in mind as we start to use these functions to get user input first what we're doing right here this is called a function call so before we assign the value of calls we're going to run this function and wait for the user to input some value so get int this function on the left hand side that will first be run before we store that value inside this variable we created. Called calls but let's say that the user does give us some value and they give us the value for well the whole point of get int is that once it finishes running it returns to us or gives us back the value the user entered so let's say they enter this value for well it's kind of like saying this function runs and gets almost replaced by this value for such that in the end it's almost exactly like writing some code like this. Calls gets the value for how do we get that by running this function called get int it returned to us what the user typed in so it's a way to get user input here but now we can think about how we can print that back out and to print things in a we'll use this function called print so here we have that same line of code in calls gets the value for notice how now calls is storing that value called for. So at the bottom we see calls is percent i backslash a calls and that seems a little cryptic so i'm curious for those of you who are here what do you think will actually get printed out if we were to run this line of code what will we actually see on the screen so i'm seeing we literally see the text calls. Is 4 the actual value 4 and to show you here we'd see this calls is again that numeric value 4 and this is a special property of print you might be wondering well why is there an fat the end turns out that of stands for formatted so i'm going to print something that will be formatted and i have on the inside of this string if you will calls is percent i i will replace that percent i. With the value of this variable called calls now the follow up question is well how did i know to put the value of calls in that placeholder percent i well what i did is i followed up my text denoting quotes here calls is percent i backslash a with a comma and i gave another input to print this time i said i want to put in the value of this variable named calls so whatever follows. Your text that you give to print by a comma whatever variable you include there the value of that variable will be included inside whatever format code you've included there or in replacement of that format code itself so there are a few other format codes you're probably familiar with a few of them look like this we have this one for integers percent i that we saw earlier one for floats or decimal numbers percent of one for characters percent a and one for string. Actual not just single characters but whole collections of text like we saw earlier that would be percent a so you'll see these over time as well so questions then on types and format codes which ones we should use in which cases all right so seeing none so far here what we'll do is actually get some practice writing. Writing code i think this is enough for review of lectures so far and one of our first steps in this weeks problem set is to write a program called hello world and this is often the first program many people write when they're beginning their computer science journey in this case we're going to go to a program that simply says hello world to the user and of course perhaps to the world so i'll go over and i'll open up cs50 de so you should see something a bit like this if you were to go to cs50 de and log in. Your git hub account no need to follow along exactly like this but if you're watching it recording you certainly can notice how i have a few different areas in cs50 de i have a top area up here that will soon be able to have a file that i can actually edit things in and down below i have this place called the terminal i can interact with this computer that i've loaded up in the cloud so now connected to some other computer not my own or actually write my own code. And where we cs50 have installed some software for you to actually write a code very easily so let me try in this case to open up a file called hello a i'll type code hello a in my terminal let me zoom in a bit so you all can see that here i have code hello a i'll hit enter and i'll see this blank file up top called hello a so now i actually go ahead and type in some a code. Maybe i want to say hello to the user what's the first thing i should do for those of you who watched lecture what might i need to do at the top of my file i need to include some stuff that people are saying so in cs50 and actually in a in general we have this idea of a library or some code somebody else has written for us that we could then use in our own program and it turns out that somebody else wrote this. Function called print and because they wrote it and included it in this library we can then actually use that function in our own code without worrying how they made it we just kind of know that it just works so to get access to functions like print i can type this special piece of syntax up top i can say has tag include stdio a hit enter here so this is allowing me to include this file called. Standard of a a header file that has print defined inside of it and now what's the next step i might need to do here i have standard of included but how would i start off my program as we usually do in a so i'm seeing we need to make a main function so by convention in a we want to make a new program we'll always include that entire program inside this function. Main int main void and now here i have let me fix that formatting here i have this function called main yours might be syntax highlighted i'm not quite sure why mine isn't highlighting here but i'll resolve that a little bit later so here we have int main void and we could type in our actual code inside of this function that we are calling main now what kind of code could we type to say hello to the user. Based on what we saw a little earlier what function should we use probably print right so i'll say print and then why don't i do this i'll say hello world and now if i hit a period here to say a sentence backslash a i should be able to hopefully run this program down in my terminal so let me try this if i want to run i could try saying dots. Slash hello and hit enter but i get this error no such file or directory so what did i actually miss in this case yeah something i was saying i forgot to make this file so as you saw in lecture there's this idea of taking the source code that is this a file and compiling it to machine code or the zeros and ones a computer actually understands so to take this a code and convert it to the code a computer. So now if the computer understands we have this special program called make which is a compiler that simply says take whatever is in hello a and convert it for me to an actual program my computer can run so in my terminal i will choose to make hello hit enter and now nothing seemed to happen but that's actually a good sign if i type is to list my files i'll see hello star which means this is a file a computer can run i'll say dot slash hello hit enter and now i. I see hello comma world so syntax highlighting aside which you hopefully see in your own code space this is how we can actually write our own hello world program what questions do we have then on these lines of code i'm seeing a question here what is the difference between a library and a header file so that's two pieces of vocabulary we've used here. We're going to include a header file or conversationally include some library but there's a difference between these two things so notice how this stdio a that is an actual file we're calling a header file and in this particular file we've defined all the functions that are included in this library like for example print but in that header file we haven't actually defined the entirety of the print function. We've just defined a few particular things like what inputs print takes or what outputs it gives to us now the entire library like we have more files than just this header file under which those functions are actually defined under which they tell us what exactly does print do so the library in general you could think of it as including all kinds of functions some like print but the header file is our way of defining what functions are inside this library. To begin with a great question so let's keep going and make this a little more advanced so our next step in problem set zero is to not just say hello to the world but to say hello to a particular user so in this case you want to get input from the user and allow them in this case to say hello back to themselves so i'll go back to my program hello a and now i want to get input from the user. What could i do maybe i want to make a variable i'll actually ask you all who are here what kind of variable should i make if i want to store some text from the user what type might be good for that i'm seeing a string a string is a variable that can store a collection of text not just a single character but a whole collection of it so i'll type string here which is the type and now what should i name this variable. An appropriate name here we could just call it name this is a variable whose name is name because it stores someone's actual name kind of confusing but we'll go with it string name and then it gets some value so i'll use this assignment operator here what value should it get i could type just carter here like this to get my own name but i want to get the users name so what could i do i'm seeing i could use get string as we saw before so get string. Is a function that is included in the set library that allows you to safely get some user input that is a string and as input inside these parentheses here get string can take some piece of text itself or a string so i'll say what is your name and leave a space so the user can type in their name after that and now down below i should think about what i should update here i have hello world. Now what should i change this to not hello world but what probably a placeholder right as i'm seeing some folks say i want to have a placeholder for this variable we created called name so i'll say hello comma and then a space percent a percent a is our format code our placeholder for a variable of the type string and now how could i make sure that the value of name gets included here i could simply follow this text with a comma. Then say the variable name and now i'll make sure that whatever value is stored by this variable called name i should be able to have a placeholder for it here in a so now let's try it i'll do make hello to recompile my program update it and turn it back into machine code i'll hit enter and i get a fatal error let's see what might be wrong so there's a few clues here. Use of undeclared identifier string did i mean standard in it's actually not what i meant in this case but often if you'll see you might get some errors saying something is undeclared undefined in some ways when that happens you might want to take a look at which files you're including at the top of your program and in this case i told you that get string was included in the cs50 library but i didn't include it up top so let me go ahead and include i'll say has tag include. And then cs50 a to include that cs50 header file and just for style sake what i'll do is actually move cs50 above standard to just to keep things alphabetized up here soc comes before a i'll make sure i have all my header files alphabetized just for style sake it would work the other way too but just to keep things a little cleaner around here so let me try this i'll say make hello hit enter nothing seems to happen. Which is good i'll type dot slash hello through my program hit enter i'll see what is your name and i'll type carter and i should see hello carter so all seems to work in this case now what questions do we have on writing our very own hello to you program seeing none so far and now let's move on to something that's a little more advanced. Actually there's one question here so why do we put name after a backslash a so it's kind of just by convention the people who wrote print who came before us and made this function they simply decided that print would take one or more inputs so here i say hello a backslash a and if i want to include if i want to take the value of this variable name and put. In this placeholder i just simply follow up with this first input called hello percent a backslash a and include that variable itself if you want to get more advanced with this you actually could so let's say i want to take a first name and a last name i actually have two placeholders hello percent a space percent a and now if i wanted to include another variable one let's say change this name to first name and then have one label. Called last name here's how i could use print i could now have three inputs separated by commas the first is the actual string i want to print with the placeholders the next one is the first variable to replace that is the value of first name will go into this first placeholder and then the second variable last name that will go into the second placeholder here so i'll update my program i'll say hello string first name what is your first name. And then here i'll say string last name gets the value of get string asking what is your last name and semicolon to finish so now i'll type make hello and i'll run dot slash hello i'll type carter followed by zeke and now i'll see hello carter zeke so some other ways to use print if you want to actually involve more than one variable in your output. Now building on this let's actually continue on and let's try actually making a more advanced program to store our contacts so i'll go back to my slides and i'll show you this we're going to have a program that prints out the takes in and stores and then later prints out a users contact information and so if you're going to write this program i want you to include the following three attributes of somebody make sure you include let's say their name you could treat it as either first name. Or first name and last name their age and also their phone number so name age and phone number and i want you to if you're watching this as a recording maybe pause the video here and try to write this program yourself then come back and write it all together all right so if you're back from writing this program let's go ahead and try to write it all together here go back to my code base and this time i'll get rid of hello a. So i'm going to type int main void what do we do to kick off all of our a programs here and now i need to get the information from the user so i'm curious for those of you who are here live. What should i be doing to actually get the users name well probably similar to what we did before i could say string name equals get string what is your name just like this but now i want to get their age and i'm curious what type might be good for getting their age maybe an integer so i could say int age equals get int what is your age just like this. Finally down below i want to get their phone number what type might be best for a phone number i'm seeing a few options here so one might be an integer like it is a phone number so it could just be an integer value but it might be better defined as a string so the difference here is that if i say int let's say just number for phone number get int. What is your phone number well that restricts the user to entering only digits and sometimes you might see phone numbers written with dashes or plus signs for country codes and if i wanted to include those well if i have an int i actually can't include those so if i wanted to be able to have the user type in pluses along with numbers a string might be good for this so i'll say instead string number and use get string what is your phone number. The user could include not just numbers like seven or one or so on they could also include parentheses dashes plus signs whatever they need to enter their phone number and now to print all this out i'll go back down below and i'll say let's say why don't we print out name followed by their name and why don't we print out in this case the age followed by their age. Using percent i for our integer here and then percent of print and then number followed by percent a backslash a semicolon and now i'll be able to include all of these as placeholders name age and number i'll be able to take the value of name and put it in this placeholder for instance so why don't we do this i'll say make contacts then dot slash contacts. Hit enter what is my name carter what is my age 25 i'll type in a phone number i'll say plus 1 let's go with 555 555 5555 for a random phone number here hit enter and now i see that same information being printed back out to me so what questions do we have on this contacts application here. Of so not seeing any from our live audience but what we'll do is round out this weeks section by focusing now on not just getting input from the user and storing it in variables but actually writing our programs with our very own functions and loops and conditionals and i think things get a lot more interesting when we get to use other kinds of building blocks here so let's talk now about again functions loops and conditionals and in this weeks problem set you'll. So you'll be tasked with making your very own pyramid like the pyramid that's in mario that very old game and also somewhat new game coming out very soon that mario tries to go through and fight enemies and go through in higher level by jumping over things like this pyramid that we see on this video here so there are a few kinds of loops and one of these loops is called a while loop a while loop is great for when you want to maybe do something while some condition is. True in your program so as one example of this let's say i have a while loop that looks a bit like this on the left hand side well i will tell you right now that the output of this piece of code is going to look a bit like this on the right hand side i'll get four hashes on the right hand side but how did we get here let's walk through it kind of step by step using the syntax that we see here so the very first line of code int a. Gets the value 0 well that creates this container in memory called a that has this value called 0 and now here's where things are a little more interesting i have this variable but i want to kind of do something with it i could make a condition out of it i could say i want to do something in my program while it is true that the value of a is less than 4 that is this condition right here now what do i want to do while the value of a is less than 4. Let's say i first want to print this single has tag down below so now i've gone and i've said well is a less than 0 or is a less than 4 it is it's currently 0 so i'll print out a single hash and then what will i do i'll then say let's increase a by 1 using this syntax plus plus some syntactic sugar here to say a is now one more than what it previously was and now logically in this list. Loop i'll go back up to the top and i'll reassess this condition i'll say is a still less than 4 and for those of you who are here live is a still less than 4 i think it is right so we'll keep going we'll go through this loop one more time i'll say print out another hash and then i'll increase a by 1 so now what is a a is 2 i'll ask again is a less than 4 it is. Again i'll print out a hash and i'll increase a by 1 and finally i'll go back at the top ask is a less than 4 well it still is it's still 3 i'll do print another hash add 1 and now when i go back up the top to assess this condition is a less than 4 well a is equal to 4 it's not less than 4 so we'll stop doing the code in this loop and we'll instead print out this special character we saw in lecture backslash a that says well. So we can move to a new line so that is one way in this case to get some set of hashes going along the bottom of let's say our pyramid using some kind of while loop but there's also another way to do this we could think of it not just in terms of a while loop but in terms of another tool called a for loop so a for loop can allow you to do very similar things to a while loop but it's good for when you know the exact number of times. So we can actually write that very same while loop using code a bit like this on the left hand side there's a few components here though that we need to break apart so maybe the first piece here is going to be this part of the loop and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're going to do this and then we're. Let's actually go back to the very beginning of this if we go here let's look at the very top of this for loop so for int a equals 0 semicolon a is less than 4 colon semicolon a plus plus that probably looks familiar from our while loop right we have those kind of very same things in our while loop we have those kind of very same things in our while loop we have those kind of very same things in our while loop. We first set a to be 0 our condition was is a less than 4 and the thing we did each loop was increase a by 1 using a plus plus we've taken all those same components but simply put them at the top of our for loop and it allows us to simplify our syntax here so on the inside we just say what we're going to do for each iteration of this loop which is print out a single hash so to visualize this on the right hand side. Let's say our very first thing we do in this for loop is we create a variable called a that gets this value called 0 then we're going to print out a single hash we're going to ask that question again is a less than 4 well it is so we'll do that thing we said we do at the very end of this for loop a plus plus now a becomes 1 we'll go through print out another hash and then we'll say is 1 less than 4 still is. And now we'll see is 2 less than 4 well it is so if we add another hash a is 3 now a is 4 no longer will be printing out these hashes that condition a less than 4 is no longer true we'll instead print back slash a to finish things off at the bottom so what questions do we have here on the syntax for while loops and for loops if any a good question is there any way that we can do that. The same line in the for loop any differences i think the main difference is more syntax so as you see here there are different orders you saw on the while loop i'm going to go out on a limb and say i think that most things you could do in a while loop you can also do in a for loop and vice versa generally though the syntax of a while loop is better suited for you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition you have some condition. Condition you're not sure when it will be true but you know what that condition is so you'd include that in the while loop whereas a for loop is good because you kind of get to actually specify the exact number of times you want something to do that loop over and over again if that makes sense and answers your question let me know if not i can give you another take on that let's see why is the a now outside of those brackets here these curly braces that you see on the left hand side. So that's simply the way that the makers of a decided it would be you might see some very similar syntax across different languages beyond a also in things like java and maybe even python as well basically this allows us to simply make things a little more compact we're moving that increment what we do each loop to increase this variable a we're moving it to the actual definition of the for loop nice. These kinds of tools i want to pose a question to you which is let's say we're able to get to a point where we're printing out a single line of hashes this code here prints out a single line of hashes and moves to that new line but let's think for a moment what could i do to get not just a single line of hashes but maybe even a full square of hashes having multiple lines now. I have one loop to make a single line i'm seeing an idea coming up in the chat maybe we could use another loop to have more than one line like not just a single line but maybe multiple like four lines of four hashes to make a square of hashes and it's actually true you can take a loop like this and put it inside of another loop a bit like this here. The inner loop this 4 int a equals 0 a is less than 4 a plus plus that is still printing out a single line of hashes but now i'm going to do that step four times per the for loop that is around that loop 4 int i equals 0 i is less than 4 i plus plus the result of this will be this square pyramid the square we see on the right hand side of hashes. On a program like mario don't be afraid to make a loop and then put that loop inside of perhaps another loop to help you solve the problem you're trying to solve in this case now to help us focus even more on functions even beyond loops in particular let's go ahead and actually try to take a first step towards writing that mario problem that we see in this weeks problem set and in this case we're going to well actually in the problems that you're asked to write a write aligned period. Pyramid in this case though we'll actually write a left aligned pyramid so if you think of your right hand and your left hand and thinking which way should the pyramid go a right aligned pyramid kind of goes up to your right whereas a left aligned pyramid goes up to your left and i would probably argue a left aligned pyramid is a bit easier than a right aligned pyramid but i'll leave that part up to you as you work on the problem set and today we'll focus on our left aligned pyramid so a left aligned pyramid looks a bit. Like this oops looks a bit of sorry i didn't have those slides in this presentation that's of we will do instead talking about functions and what we could do to create a left aligned pyramid if you can visualize in your head let me go to my actual code space over here what that looks like i'll say code pyramid text i'll show you an example so here this is an example of a left aligned pyramid this is a pyramid of height 5. But if i wanted to have a pyramid of height 4 i could simply get rid of a hash here and a hash there and a hash there and a hash there and now i have a pyramid of height 4 and a pyramid of height 3 too i could say get rid of this hash and this hash and this hash and this hash and now i have a pyramid of height 3 i keep going a pyramid of height 2 and even a pyramid of height 1 to help you visualize what's at stake in this problem here. Own pyramid or a program that prints our very own pyramid why don't we go ahead and make a file called mario i'll say code mario a and inside all to the usual things i'll include standard of a i'll include cs50 a these header files that have the cs50 library and standard of library somewhat defined in them i'll then say int main void to kick off this program and on the inside what's the first thing. I should do i probably want to get height from the user but how could i do that those of you who are here live how could i get a height from the user to print out this pyramid so i'm seeing maybe i want to use something like an integer to store the height because again this pyramid will be some number of blocks tall so i like the idea let's do it with that i'll say int height. Here and i could for instance say int height equals 5 off the bat but i could probably get the input from the user using that function we saw earlier get int like this and i'll prompt the user for some height so now it's a good idea once i'm at some stopping point in my program try to compile it and see if it works i'll then type make mario hit enter and i'll type dot slash mario i'll see i'm prompted for a height i'll hit 5 here. Nothing happens but at least i know my program tends to work at this particular stage so let's think about how we could use functions to be solving this problem now here we have this function called get int but it's worth actually diving into what get int is doing for us and talking through some vocabulary that can help us understand what get int is actually doing so for that we'll focus on functions and notice here how we can actually define. We at cs50 defined this function for you you don't see its definition in your actual code because you can only just use it now but we did work on defining this function for you and notice a few pieces of this function notice how up front we have this idea of the name for this function this one called get int we could think of it kind of like that black box we saw david mention in lecture we have some algorithm some function. Function that is called get int some black box here that's going to take an input and give us some output now we can also define the output of get int we act did this part for you we said that it will take an input in this case called prompt that is of type string so notice how when i used get int i typed in a string as the input to get int this input was called height followed by a colon so now in this case we see that. That get int takes a string that within that function is called prompt and then what does get int give us well at the very end of the day it gives us back an integer in this case a whole number that user actually typed in themselves and so of course we would use this function a bit like this we could say take in a prompt it gives us back two or four or so on but we'd use it using int height gets the value of something like this function get int. Int followed by height and when this function runs it returns to us what we said would return over here something of type integer that makes sense so questions then on this function declaration what we did over here to define what get int is doing for us. So many questions here so why don't we keep working on our mario program i'll go back over here and we saw before that i could print out a single row of hashes using a for loop right but maybe it would be worthwhile to consider how i could put that code that prints out a single line of hashes into its own separate function that i could use in my main part of my program. One called main up here so i wanted to define that code that writes that line of hashes for me separately i could probably put it in its own function and to define my own function i could probably go down below here and say something like this why don't i create this new function i'll call it in this case print row and what kind of input do you think print row should take ideally. Modify the length of the row how could i say print row takes an input to modify the length any ideas in the chat one thing i could do is think well the input to this function i want it to be the number of hashes to print on the row so that seems to be a number an integer so i could say print row takes an input that is of type integer. And i have to give it a name i'll call it in this case length the length of that row and now i'll think what should print row return to me well it doesn't really return me a value if i'm going to use it it simply just prints things out to the screen in lecture we saw a difference between return values and side effects in this case it just has a side effect it just prints things to the screen so i'll actually make sure that this return value is simply void it's nothing in particular so now print row is a separate function. It has an input called length that is of type int and it returns to me nothing in particular just prints things out to the screen so now inside of print row i could have that very same loop we saw earlier perhaps a for loop i'll say for int i is 0 and i is less than what like before we saw for to get a length of 4 or 3 to get a length of 3 but now i want it to be a very simple loop. Variable length i could decide later what i want the length to be i'm seeing some folks saying maybe i could use this variable that's input to print row called length i'll try that i is less than length i plus plus so now when i use this function print row i could pass in some number and then i'll loop that many times in my for loop and what will i do for each loop well i'll print out in this case. I will print out a hash each time at the end of all that looping i'll print out simply backslash a to move to a new line so this is my print row function down below now if i go up top i could try to use print row i could say well i want to print a row that has the length of 4 like this so i'll first get the input of height from the user and i'll not use it for now i'll just use print row with the value 4. Go to my terminal here type make mario hit enter and i seem to be getting an error what is the error you'll see here implicit declaration of function print row is invalid in c99 what ideas does that bring up for you here what might i be doing wrong so it seems i haven't actually included what we're calling the prototype for this function so if i look down below here actually i forgot my program. Top to bottom like a would of a i'm going to include some files have a main function get the height and then call this function or use this function called print row and give it the value 4 but up until now if i'm reading top to bottom i actually haven't seen the definition for print row where is it well it's below it's down here on line 10 but i can't be calling this function if i haven't told a that it's going to come up in my program yet. So what i should do instead is take the function prototype that is its name its input its return value and put it at the top of my program often by convention below my includes and i'll follow it with a semicolon here saying this is my function prototype this is the line of code that tells a i promise i'm going to define for you what print row is later but for now just let me use it when i say i'm going to use it. Now in main i'll see hopefully see doesn't actually complain when i use print row because up top i told it exactly what i'm going to use as well so now i'll type make mario hit enter and that seems to work so now i'll type dot slash mario hit enter say the height is 6 hit enter and i get this line of only four hashes but what could i do to update this program to print out not just. So i can use this variable called height so we know that this variable called height is a container for the number i typed in in this case 6 so if i want to pass in that same value to print row or to print out a row of that length i could install that. And i can also do that by typing in the function print row and i can also do that by typing in the function print row and i can also do that by typing in the function print row and i can also do that by typing in the function print row and i can also do that by typing in the function print row and i can also do that by typing in the function print row. This integer called length what actually happens is height we have storing a value in this case 5 down below that value for height is given to print row and as long as i'm running the code in print row that value 4 will be associated with this name length in this case so i took the value that height stored 5 i gave it to print row and as long as i'm running the code in print row. As print row is running that value 5 is now called length in the context of this function print row we call that this idea of scope in computer science so here we have a way to take the users height and a way to print a row of that height we're not quite all the way there yet but what questions do we have on the code so far. I'm seeing a question here is any situation where not prototyping but declaring the function above main would be better so notice here we had the prototype for print row above main but we had a definition for print row below it now i think the question is asking is it ever useful to do essentially this to copy and paste to cut and paste this and put it above main a bit like this you certainly could but i find it more readable in this case to have the main function. Up first because when we run our program the main function will always be the first to run so more style for style sake than anything else in this case question here in line 4 and 12 you have declared void print row int length two times why is that of because we can't do that with variables that's actually a good observation so if i were to for instance on line 8 create a variable. Called height and then later on create a new variable called height like this i would find that a when i try to compile a program doesn't like that i can only have one variable under one name at the same time i can't have two variables with the same name here though it seems like i have two functions with the same name i have one called print row up here and print row down below i think the answer to this is that it's built into a is this syntax that if. Do you have a function you want to use and it's defined later in your code you simply copy and paste the prototype name its input its output put at the top of your file and a knows this is a function that will later be defined it's not a separate function with the same name and one more question here why is height printing length when logically height is up and down and not left to right that's a great question we're going to fix that in just a moment. We noticed that in my separate file i'm going to make code pyramid text if i wanted a pyramid of height let's say 3 notice how the bottom row has length 3 in this case so a pyramid of height 3 the bottommost row that has the length of 3 but also notice how above this has length 2 and then length 1 up top so there's probably an association between the height. And the actual length of these rows i'm printing so what if we tried something a bit like this i know i want to print more than one row and i probably want to do it in a way that involves a loop we saw a loop is a way to do things more than once so i could say maybe something like 4 int i equals 0 i is less than well how many rows should i print in this case. If i have a pyramid of height 3 how many rows should i print seems like 3 so i think in this case it's safe to loop height number of times and increase i by 1 every time we go so now inside this loop i'll print row and maybe i'll keep it the same with this input called height so let's try that i'll say make mario dot slash mario height of 1. 3 i'm going to square so it seems like we're getting there but i need to change something about this program what should i change do you think so i'm seeing a few ideas one is actually to use this variable here i that we declared and initialized inside of our for loop. So as long as we are within this for loop within its curly braces i actually have access to this variable i i is what's called in scope i could use it throughout this portion of my code so maybe i don't want to print a row that is of length height but maybe of length i so first i would be 0 and then it would be 1 and then it would be 2 and so on so actually if i look at my pyramid my very first. So i'll say just take i and increase it by 1. I'll say i'll make a dot slash mario period of height 3 and now i can be getting somewhere so i'll make my turn and then i'll say i'll make a dot slash mario period of height 3 and now i can be getting somewhere so i'll make my turn and then i'll make a dot slash mario period of height 3 and now i can be getting somewhere so i'll make my turn and then i'll make a dot slash mario period of height 3. Terminal bigger i'll say make mario slash mario again height of 5 and i seem to be getting what i'm looking for with this left aligned pyramid so let me ask what questions do we have on this implementation of mario using left aligned pyramids and functions in general. So seeing none here and again the goal for these sections is to give you some tools which you can go off and solve this weeks problem set now one more tool i'll give to you is to think about how you could use the same idea of defining a function to actually work in your favor on this next mario problem that asks you to write not a left aligned pyramid but a right aligned pyramid so we saw just now we created some function looked a bit like this called print row in this case it takes an input from the right. We called bricks we called it length same thing here we're able to take a length of hashes to print and just print that out as we go but now you could consider expanding that functions capability to take not just one input but two maybe one for some number of spaces before the actual bricks or hashes come up and then one that takes in the number of bricks to actually print out those hashes as you go so notice how over here in pyramid text. Wants to be right aligned i first print out some number of hashes or some number of spaces and then my hashes as we go to move this pyramid from being left aligned to now being right aligned so we'll leave you with that to consider as you solve mario this week but that was section one here for cs50 hope to see you in future weeks thank you all for joining and see you next time