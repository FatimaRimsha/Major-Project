 All right, so now let's talk about something really useful in programming, conditional statements. So conditional expressions allow your programs to make decisions and take different forks in the road, something I alluded to a little earlier. Depending on the values of variables or based on what the user inputs at the program or at the command line or if you have a prompt or something like that, C has a couple of different ways to express conditional expressions, which we also sometimes will call a conditional branch in your program. 
 And some of these are going to look pretty familiar to you from scratch. So we'll even pull them up side by side just so you can make that analogy in your head. So if is a pretty simple conditional. If, if you recall from scratch on the right here, you could fill in that hexagon with a Boolean expression. If mouse down, or if x is less than 10, or something like that. And then if x was less than 10, or if the mouse was, in fact, down, all of the code inside of the pointer
 would execute all the things that fit inside that C shape. Similarly, do we have if on the left there, if Boolean expression, which I'm just using as a substitute for one of the Boolean expressions we've previously discussed, open curly brace, closed curly brace. So think of open curly brace and closed curly brace as sort of analogous to the sandwich effect of the if block on the right from scratch. If the Boolean expression in the if statement is true, then all of the lines of code
 between the curly braces will execute in order from top to bottom. If the Boolean expression is false, we'll skip over everything in between the curly braces, because we only want to go down that fork in the road if the Boolean expression is true. We can take this one step further with if else. So this scratch block is pretty similar to the one we saw just a second ago, except it takes two different paths based on what happened. So if the mouse was down, or if x was less than 2,
 We'll do everything that's in between that first c. Otherwise, if the mouse is up or x is not less than 10, we will do everything in the second set. And that's analogous to what you see here for c. If Boolean expression do the stuff between the first set of curly braces, else do the stuff between the second set of curly braces. So if the Boolean expression is true, we'll do whatever's between the first set. If the Boolean expression is false, that would trigger the else, and we would do whatever is in the second set of curly braces. 
 Again, top to bottom, all the lines in between the braces. In C, it's possible to create an if else if else chain. And in fact, you can have if else if else if else if and so on and so on and so on. In Scratch, this required nesting the blocks. You had an if else, and then you had to put another one inside of the else and so on and so on. And it got kind of nested and complicated. But C, we don't have to do that. We can actually just have it be a chain like this. Again, as you might expect, all of these branches are mutually exclusive. You can only ever go down one of them. 
 of the branch. If this is true, otherwise if this is true, otherwise if this is true, otherwise do this. So all four of the branches in this example are mutually exclusive. It's an if else if else chain. It is possible, though, and sometimes very useful, to create a chain of not mutually exclusive branches. In this example, only the third and fourth branches are mutually exclusive. It could be that you could satisfy the first condition, and you could satisfy the second condition. 
 you could satisfy the third condition, in which case you would go down the first branch, then you go down the second branch, then you would go down the third branch. Or perhaps you satisfy the first condition and the second condition, but you don't satisfy the third condition. In this case, you go down the first branch and the second branch and then the fourth branch. The reason for this is that the else will only bind to the nearest if. So even though there's an else here, that doesn't necessarily create a mutually exclusive chain of everything. 
 expression there with Boolean expression 3, that's the mutually exclusive with the else. So it is possible, and sometimes quite useful, as I said, to create a chain of not mutually exclusive branches. Let's take a look at a different kind of conditional, which you have not seen before in Scratch. There's something called the switch statement. The switch statement is kind of neat because it's a conditional statement that allows you to specify distinct cases instead of relying on Boolean expressions to make decisions for you. 
 I have this program, and I'm asking the user to provide input to me. So I say int x equals get int. And if you're not familiar yet, get int is a function that is also included in the CS50 library. So if you pound include CS50. h, you'll have access to get int and all of its cousins, get float, get string, and so on. Basically, one get function for every data type that we've already discussed. So int x equals get int. Basically, what's happening is I'm at the terminal. I'm asking the user to type in a number. And here, I'm just switching
 what I'm doing depending on what the user typed at the prompt. So if they typed one, I print out one, and then I break. If they typed two, I print out two, and then I break. It's important to break between each case, because otherwise you will fall through. So if I didn't have any breaks there and the user typed one, what would happen is it would print one, two, three, sorry. 
 Sorry. That's kind of strange behavior, right? You might think so, but there are actually some cases where this could be a pretty useful thing. So here's another example of a switch statement where I omit the breaks, but I do it on purpose. So what happens here? Think for a second. You might even want to pause the video. What happens here if the user types 4? So I've asked the user for input, and they provide the value 4. What gets printed when I do that?
 previous slide, there were breaks between all the cases. And so it would just print 4 and then stop. But in this case, it won't. What will happen is you will fall through each case. So in this case, I've organized my cases in such a way that if the user types 4, I will print 4, 3, 2, 1, blast off. And if they typed 5, I would start at 5 and do the same thing. And if they typed 1, I would just do 1, blast off. So in this case, I'm using a switch kind of cleverly so that I do
 to fall through all the cases. But generally, you're probably going to want to break between all of them unless you have a situation like this one where you're kind of leveraging the fact that you'll fall through the cases without a break. So that's the second of the major types of conditional statements, the last of which is question mark colon. So I have two snippets of C code here, one on the left and one on the right. The one on the left should probably be pretty familiar to you. I have int x. And I probably should have asked the user for it. It should probably be int x equals get int or something
 like that. And then I'm making a decision. If some Boolean expression is true, assign x the value 5. Otherwise, assign x the value 6. That on the left should probably be pretty familiar from our discussion of if else just a moment ago. Would you be surprised to know that the line on the right does the exact same thing? So this is called question mark colon, or sometimes called the ternary operator. And it's pretty cool. It's usually used as a cute trick. 
 to do is to simulate an if else with really small, really trivially short conditional branches. You generally wouldn't use question mark colon if you had six lines of code between each set of curly braces. But if you're just making a quick decision, if you're going to do one thing or the other, and it's very simple, this might be an example of how to do it with question mark colon, the ternary operator. So int x equals expression, question mark. The thing after the question mark is what x's value will be. 
 if expression is true. The thing after the colon is what x's value would be if the expression was false. So I'm asking myself, is the expression true? If it is, assign x the value 5. If it's not, assign x the value 6. Again, like I said, this is usually just a cute trick. And sometimes if you become really comfortable with it, you'll do this because it looks kind of cool in your programs. Generally, I'm presenting it to you now so that you're familiar with it if you see it. But certainly, no, you don't have to write it in any of your code. 
 But it is something to be familiar with because you'll definitely encounter snippets of code here and there where this question mark colon syntax, aka the ternary operator, is used. So a quick summary on what conditionals are and what the options are available to you in C. You have if and if else and if else if, et cetera. You can use Boolean expressions for those to make decisions. With switch statements, you use discrete cases to make decisions. You explicitly say, if it's one or if it's two or if it's three, I'll do this thing or this thing. 
 or this thing. And question mark colon can be used to replace very simple if-else branches or if-else chains to make your code look a little fancy. I'm Doug Lloyd, and this is CS50. 
