 All right, so let's talk about loops. So loops are kind of cool because they allow your program to execute lines of code over and over and over repeatedly without having to copy and paste or otherwise repeat them. There are three major kinds of loops in C, and you'll probably have occasion to use each one as you progress to CS50. Some of these loops are pretty familiar to you from scratch. So again, as we did with conditionals, we'll put them up side by side if there is an analogy that we can draw. 
 from scratch, which compares to while true. This is what we call an infinite loop. The lines of code between the curly braces, much like the puzzle pieces that fit inside the C of the forever block, will execute repeatedly from top to bottom over and over and over forever. After all, if you recall from our discussion of Boolean expressions, true is always true. So if we're doing something so long as true is true, it seems a little silly, true is always true. So it'll always run. It'll run forever and ever and ever until we
 find a way to break out of it with a break statement, which again we saw a little while ago when we were talking about switch. Or otherwise, just kill our program. Which incidentally, if you ever find yourself in a situation with an infinite loop and you don't know how to stop your program from running, just hit Control and C. And that'll kill your program for you. But this again is called an infinite loop. It is a loop that will run forever. Now, while loops are not always infinite, we can also replace the Boolean expression with something a little more useful than just true. 
 So here's another example, while, and then some Boolean expression, and then curly braces. That's pretty much analogous to repeat until from scratch, although in a second I'll explain the difference. So in C, if the Boolean expression inside of the while loop evaluates to true, the lines of code between the curly braces will execute repeatedly over and over and over until Boolean expression evaluates to false. So for example, you might have some sort of counter. So say you had the beginning of this loop, you say int x equals
 equal 0, while x is less than 100, do a couple things inside that curly braces. And at the end of your loop, you say x plus plus. You're incrementing x. So eventually, x will get to 100, and you will stop, because the condition x is less than 100 will no longer be true as soon as x is equal to 100, because 100 is not less than 100. Now, somewhat confusingly, the behavior of the scratch block is reversed. So be really careful if this is your first foray into using loops. 
 the repeat until block and scratch will repeat something over and over and over until the expression, the Boolean expression in the hexagon, is true. So it will keep doing it until it is true. Meanwhile, the while loop will continue to do it until it is false. So they're quite similar, but there's that little distinction just to be careful of, especially as you make your first foray from transition into scratch into C. The next kind of loop is actually pretty simple. 
 It's called the do-while loop. This loop will execute all the lines of code between the curly braces once, and then it will check the Boolean expression. If the Boolean expression evaluates to true, it'll go back and it'll repeat that process over and over and over until the Boolean expression evaluates to false. So this loop, unlike a while loop, is guaranteed to run at least one time. This will be pretty useful. Lastly, we have a for loop. For loops are kind of syntactically unattended. 
 attractive and there's a lot going on here, so bear with me as we try and break these pieces apart. Generally, the use case of a for loop is you want to repeat something a specific number of times. In this example here, I have the repeat block from scratch, which is analogous to the for loop in C, repeating something 10 times. And the for loop on the left there, which is a for loop that would do the same thing. This would go 10 times. We're counting from 0. We increment i each loop, each path through the loop, and we keep doing that until i is less than 10. 
 There's a whole lot of code there. Let's break it down into what is happening step by step as we dig through a for loop. The first thing that happened is the counter variable is set. Everything to the left of that first semicolon inside the parentheses is executed. In this case, we are saying int i equals 0. Declaring a new variable called i, that variable is a type integer. And we're saying the value inside that variable is going to be 0. The second thing we do is we then immediately evaluate the Boolean expression. The Boolean expression is in the middle of the two semicolons. 
 I is less than 10. That's true here, right? We just set I is equal to 0. And so 0 is less than 10. And so that condition is true. And we will now proceed to execute the body of the loop. If it was false, if for example, I had said, instead of I equals 0 there, I had said I equals 15 into I equals 15. Well, 15 is not less than 10. So we would never enter the body of the loop. Because the Boolean expression there would evaluate to be false. After we go through from top to bottom, and we encounter that close and curly brace, a third thing happens. 
 happens. The counter variable is incremented, or rather, the lines of code or the statements after the second semicolon inside of the for loops parentheses is executed. So we start out by saying int i equals 0. Then we check whether or not the Boolean expression is true. 0 is less than 10, so it's true. So we're going to proceed into the body of the loop. Things will happen inside the loop, and we encounter that closing curly brace. The next thing we do is we say i plus plus. So i was 0, now i is 1. 
 And so that's basically the process for a for loop. 
 taking away the actual code and putting it in some sample, just some basic general statements. Here's what happens. All of the statements in start are executed first. You might have more than one. Then the Boolean expression is checked. If the expression evaluates to true, execute the body of the loop one time. If the expression evaluates to false, we're done. We don't execute the body of the loop at all. After we've executed the body of the loop one time, we then do what is in the increment part there. 
 which is usually going to be something like i plus plus or something like that that modifies a counter variable. Then after we increment, we check the expression again and repeat those steps over and over and over until the expression is no longer true. So what are the use cases for a loop? You use a while loop when you want a loop to repeat an unknown number of times, but it possibly might not run at all. A really common example of a while loop being used is to run the control flow for a game. You might not know how long the user is going to be playing, but you want to keep doing
 the same thing. Updating the positions of various sprites on the board. You want to keep things moving at all times. But you don't know when the user's going to stop playing or when they're going to run out of lives. So a while loop is really good for something like that. That's a good use case. For a do while loop, it's pretty similar. You want a loop to repeat an unknown number of times, but at least once. You might use this for a game, too. But a really common use case is prompting the user for input. Generally, you might say something like, give me a positive integer. And you might put that inside of a do. 
 do-while loop. So it'll always ask them at least once for a positive integer. If they give you a positive integer, you might break out of the loop. You might be done. The Boolean expression in the do-while might be false, and you won't ask them again. If they give you a negative number, though, or they type some word or something that's not really useful to you, you might use the do-while loop to go back and do it again and again and again. You definitely want to ask them to give you a number once, but you don't know how many times after that they might be pests. And so a do-while loop is a great use case for prompting the user for input. 
 And a for loop use case typically is when you want to repeat a loop a discrete number of times, though you might not know the number of times at the moment the program is compiled. So for example, maybe you have a program where you prompt the user for a number, say, and they enter 100. And maybe your for loop will then, in that case, run 100 times. Or maybe they enter 1,000, and your program would then run the loop 1,000 times. It's a specific number of times. But you don't necessarily know what that number is the moment the program is. 
 is compiled. It's not like a while loop where it could be infinite. It's rather a number that you just don't know. Now, even though I've outlined all these use cases, you should know that in pretty much every circumstance, you can interchange all three of these loops. You can use a for loop where you would otherwise use a while loop. You can use a for loop wherever you would use a do while loop and so on. It can be a little tricky sometimes, so generally it's best to, it's a good practice to adhere to a typical use case. Use a do while loop if you want to do something once at least. Use a for loop if you want to do something a specific number. 
 of times. After all, that's why there are three different kinds of loops so that they can be used in the right context. But you can interchange them if you want. If you feel comfortable with while loops and you always want to use while loops, it is something that you can do, although it might be a little syntactically tricky, where a for loop would be a lot more straightforward. My name is Doug Lloyd, and this is CS50. 
