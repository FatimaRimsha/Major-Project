Music. You. You. Hello world this is cs50 harvard university is introduction to the intellectual enterprises of computer science and the art of programming woof woof. I'm sorry dave. We are billions of beautiful hearts. Happy. All right. This is cs50 harvard university is introduction to the intellectual enterprises of computer science and the art of programming and this is spot and our thanks to our friends at 3d cowboys for bringing him by class today perhaps a round of applause for our special professor gay my name is david alan and i actually took this class cs50 myself some years ago but i almost didn't and i didn't because when i got to campus as a friend. I really gravitated toward things already familiar things with which i was already comfortable specifically government and i came in here thinking i was going to major or concentrate in government and it was only once i got to sophomore year fall semester that some friends of mine were coming to this class called cs50 that was very much to beware at the time in that it was an unfamiliar field just so many of us myself included but i sort of got up the nerve to go over the threshold sit in on the first class to shop it so to speak and i was hooked i found that homework was for the first time very good. And this was after having enrolled only because the professor let me enroll pass fail or sat on set because i didn't really think i could even cut it but fast forward to like five mondays later in the semester i actually switched to a letter grade deciding wow this is actually something for me and i say this because computer science what i didn't realize about it at the time really is this very general purpose way of thinking and way of solving problems and even if this is the only is class you ever take even if this is the only formal training you have in programming as a program. Practical skill it's just so darn applicable to so many other fields the arts humanities social sciences natural sciences and beyond and certainly within the stem fields themselves that said it's going to often feel a little something like this this is from our friends at it down the road which is one of their hacks whereby they connected a fire hydrant to a drinking fountain with a little sign up there that says getting an education from it is like drinking from a fire hose which is to say that it's going to feel quite often in this class too that there's. And you can't possibly absorb it all but realize that's sort of to be expected especially in an introductory class the whole point is for so much of it to feel new but with practice with time with years even looking back will you get all the more comfortable with the material but you're not meant to feel comfortable along the way and so let me encourage you invite you expect you to get comfortable feeling uncomfortable along the way whether you have or have not prior computer science or programming experience now back in my day the class was a little bit different. Syllabus was a little bit different and really when i and all of my classmates exited the class we would say to friends that we learned how to program in a which is a language that we ourselves will still learn in this class but that was it for languages but nowadays as you'll see we'll explore not just this older language called a but a more modern language called python that's very much in vogue for data science and web applications and much more but we'll also introduce you along the way to another language called sol or sol which is specifically for data. Databases and sequels a different type of programming language that's just going to give you different ways of solving problems different building blocks with which to express problems you want to solve we'll introduce you toward the end of the semester yet another language javascript often used with markup languages called home and ass with which maybe you have some experience if you've made websites but we'll do this because so many of today is actual real world software is web based or it's phone based mobile based but even then it's using these same languages like javascript. And so by the end of cs50 in particular you won't know how to program in a or a or a per be but period you'll learn how to program and indeed among the goals of this class is to equip you with enough of a set of concepts and of practical skills and experience that after cs50 again if you never take another is class you can teach yourself new languages and you won't feel you won't have been reliant on a class to indeed introduce you to each and one of those ideas and what are we going to do then in this class. Going to start doing today we're going to learn how to solve problems and that's really what computer science is all about well very specifically today knock off a few to dos we'll learn how to represent simple things like numbers we'll learn how to represent letters of an alphabet like english we'll learn how to represent color red green blue and everything in between we'll learn how to represent more interestingly full fledged images that you might see on the web or your phone we'll talk about representing videos and even audio files so by the end of today alone you will exit here with a new. A new fundamental model for how you can represent all of today is media and multimedia that we sort of take for granted and use most every day but we'll also focus today ultimately on how to write algorithms like step by step instructions for solving some problem specifically implementing algorithms with code and that's what we'll find an algorithm is just something you can express in english or any human language but code is a translation of that to presumably the zeros and ones that you've probably heard is all that computers ultimately speak. And if you're feeling like that's a lot for today if you're feeling like that's a lot for the whole semester realize and take comfort in knowing that 2 thirds of you have never taken a is course before so even if you think like i did all those years ago that surely my friends the kids i didn't even know in the class must know more than i've been programming since they were six years old that's just not the case you're in very much good company and within the class will you find different tracks by way of the homework assignments called problem sets by way of the sections or recitations there all be different tracks for those of you. Comfortable more comfortable somewhere in between and if you really don't know why you are here today we'll even have sections for those least comfortable where you just don't necessarily feel ready to dive into is or maybe stem more generally but we'll get you there by way of the courses support structure and it's very much grounded in this mindset what ultimately matters in this class is not so much where you end up relative to your classmates but where you end up relative to yourself when you began so whether you have or have not prior programming or is experience it's not going to matter when it comes to evaluation. When it comes to the output be it a gray or satisfactory marker they're like it's going to depend on really where you are today in this what we call week zero versus the very end of the semester when you have built something grand of your very own in software but cs50 is also characterized fairly uniquely by its community its culture and along the way you'll see that your experience is punctuated by a lot of social and academic events alike cs50 lunches most every friday will gather at a nearby restaurant called hangzhou where we'll have chinese lunch together. And as many of you as might want to attend that week will be able to join us sit down and chat casually with me the team of course is teaching staff friends of ours alumni from industry as well cs50 puzzle day coming up this weekend will be an opportunity even if you have no prior is experience just to solve problems not jigsaw puzzles but puzzles in the logical sense we'll hand you a packet of puzzles logic problems or riddles or the like that you as teams can solve together and at the very end we'll walk you through and along the way there all be not only these puzzles but pieces. And prizes and so much more as well toward the end of the semester we'll have a cs50 hack than whereby we'll get together around 7 pm at the start of reading period and we'll finish up around 7 am the next morning and it'll be this opportunity to really bond with your classmates your project partners if you work in a team on your very own final project which is meant to be a capstone of the course something you build yourself that we don't hand you a specification for but it's sort of your final of boarding so that when you exit cs50 you don't need. Cs50 anymore you don't need me you don't need your of you can actually write code and solve problems on your own so this picture here is one of our past photos from earlier in the evening things get a little quieter as we then around 5 am drive anyone who's still awake and energetic to a nearby shop for pancakes around then but here is how most of the evenings tend to end for at least some of your classmates prior but at the very end of the class is the so called cs50 fair an exhibition of all of your final projects for friends faculty students and students. So today let's focus in on computer science what is it. Study of information but really it's more specifically about solving problems using certain ideas and techniques all of which you'll exit the course with so as such problem solving is a goal that will approach by way of something called computational thinking so computational thinking you can kind of over simplistically think about it as thinking like a computer but it's really the application of ideas that we'll dive into today and we'll finish some weeks from now that you can apply to problems from this field or most any other. Other but in a computational that is a very methodical very careful way and that's what is really did for me and does for a lot of people it helps kind of clean up your thought processes even if you go off into the real world and do nothing in tech you have an ability after classes like this to express yourself a little more correctly more precisely and generally having better command of your own ideas and your language so what's problem solving let me propose that this is it like this is as simple as we can make today is goals and the semesters goals problems to be. You've got some input the problem to be solved you've got a goal being the output like the solution there too and then somewhere in the middle is the secret sauce where we'll spend the next several weeks figuring out how we can convert these inputs to outputs but before we can do that we all just kind of have to agree on how to represent these inputs and outputs whether it's with english or really any type of language but as i spoiled earlier you probably came in here already with a general sense that yeah computers somehow only speak or know zeros and ones the so called binary. Binary system but that's just one way of representing information even simpler than binary is nary so if you've ever at this age or in a prior age sort of counted on your fingers this is nary notation whereby each of your digits your fingers literally represent some piece of information taking attendance like 1 2 3 4 5 but on your one human hand how high can you count in this nary notation 5 i'm hearing 5. Six i heard one six but i'm going to go further and say the answer if you're clever about it is actually not quite 40 you overbid but 31 is as high as i can actually count and that's because if i actually and if you're thinking this is weirdly painful now like it will be but this is my hand representing the number zero normally in nary this is one two three four five of course obviously but what if i take into account the order in which i'm putting my fingers up and down. Is still 0 maybe this is still 1 but maybe this is now 2 where it's just the single second finger up not two of them total maybe this is now 3 maybe this is now often offensive with just the middle finger up this is now 5 this is now 6 this is now 7 and my hand just hurts too much if i try to count higher than 7 but theoretically because each of my fingers can be down or up and i've got five of them that's actually 30. 42 possible permutations up and down but wait a minute we said 31 but if you start at 0 you kind of have to subtract 1 from the biggest possible value so this is to say you and i have been using nary because it's just simple and it gets the job done but if we just think about representation a little more cleverly we can do exactly what computers do using not what mathematicians call base 1 where the fingers either there or it's not but base 2 and in base 2 we just need two digits at our disposal and we could call these digits. 1 and 2 a and a black or white we just need two words to describe two pieces of information computers keep it simple and just like we humans start counting 0 1 2 3 on up computers use 0 and 1 and that's it but that's by convention but why do they do that well it turns out when you use base 2 otherwise known as binary well it just maps really readily to the real world because at the end of the day what do we all do if you've got a laptop or phone or any device you plug it into the wall. Because it needs electricity at some point and what if you have electricity or not well there's your sort of two possible values either it's there or it's not and because computers are electrical devices this is why binary is just useful it's nice and simple either electricity is there or it's not so when you plug this device in and you've got all these electrons or whatever flowing maybe if we just kind of hang on to some of that electricity we can represent what we'll call a 1 and maybe if we let it dissipate or go away that's a 0 so on and off. Very readily to this idea of just zeros and ones and if you've ever thought of this now as binary digits by implying two zero and one well if you've ever heard this term now bit it just means binary digit a single bit is just a zero or one but we could have called these things anything we want now how does this map to be clear to the real world well we can't see the little switches inside of our macs pcs and our phones that are actually turning the electricity on or off storing electricity or not but they're called transistors. They've got like millions of them in today is hardware and they're just on or off like a switch or a light bulb so for instance if there's no electricity the switch is off we would call this by convention a zero if though you throw the switch and it actually turns on we would call this and on exactly a one we could have reversed it but this is just the way the world decided to standardize and that's it so you've either got something on or off a one or zero and this then is this thing we know now as a binary digit or bit. So once we've got these values what about how can we go about perhaps representing things well you know what it turns out we got like a lot of light bulbs right here let me grab the little music stand here let me borrow a couple of these bulbs and see if we can't make clearer than my hand alone what's going on here so i'm going to go ahead and grab two of these and i'll just put them here and i can turn these things on or off now so if i've got two bits two bits. Two switches two transistors if you will well if i go ahead and turn on this one i'm representing what number in binary perhaps so just one now if i'm using nary i would turn this one on and be done with it and that's two but not in binary binary it's the permutations which ones are on and off that matters so what now am i representing here perhaps two so this is when i put my single pointer finger up but then when i did this in my human hand. This was like representing the number three how do i represent the number four yeah like i need kind of another light bulb so i need more hardware so to speak so if i turn this one on this one off this one off now i have the number four and someone tell me saying the words on and on and on or on or off or on using combinations on and off. How do i represent five from your left to your right how about over here on off on i heard and that's exactly right and how do i represent maybe six over here off on on not quite from left to right the other way of so from right to left so i think we leave this one on this one i'm going to claim represents now six and seven. It's actually going to be on on on now if you're sort of wondering where are these people coming up with these combinations there's actually a system here it's actually kind of hard for me to do it backwards but it turns out there's actually a system that's not all that unfamiliar in fact let me propose this let me propose that we consider what you and i all learned in grade school which was something like the base 10 system 10 meaning that you use 10 different digits not 2 10 so like 0 1 2 3 4 5 6 7 8 9 that's the base 10 system. Is known as decimal dec implying 10 so that's what you and i use every day well let's think about how we represent numbers in decimal in the normal human way well here is a number it's what number of course 123 so we all just have an intuition for that obviously but it's not necessarily 123 you're just assigning meaning to the positions of these digits this is really the pattern one two three but you immediately jump mathematically to 123 but why well odds are in grade school you learned that the right most. Is the ones place or the ones column this is the tens place or the tens column this is the hundreds place and so why is this relevant well this is like doing 100 times 1 plus 10 times 2 plus 1 times 3 or if we multiply that out 100 plus 20 plus 3 ergo the number now that we just take for granted is 123 but that's in base 10 the so called decimal system whereby each of these digits is in a different column and those columns are again ones places. 10s hundreds if we keep going 1 000 10 000 and so forth but where did these come from well here's the base if you remember exponents and all of that this is just 10 to the 0 10 to the 1 10 to the 2 at infin tum and so now what if we just change the base from 10 0 through 9 to just two digits 0 and 1 well now the mathis sort of fundamentally the same but it's 2 to the 0 2 to the 1 2 to the 2 which gives us the 1's place 2's place and 4's place now why is this relevant if you've got three light bulbs. Or three bits that are off off off what have i done 4 times 0 plus 2 times 0 plus 1 times 0 is obviously the number you and i know in decimal as 0 this though represents the number you and i know as this represents 3 4 and just to be clear this is why when i grabbed the additional light bulb we claimed that this now was 4 because we had on off off on off off. Is five this now is six this now is seven and if i wanted to count higher what would the pattern of zeros and ones be for the number eight 1 0 0 0 so we just need more hardware more bits so it wasn't arbitrary even if it was non obvious what i was actually doing with turning these light bulbs on and off now it turns out here we are talking about how to represent information like numbers but we could also use bits zeros and ones light bulbs to represent. Instructions as well because at the end of the day that's kind of all computers do they kind of process data information of some sort whether it's files or numbers or images or videos or the like and you do things with those files you open them you print them you edit them and the like so there's this notion of instructions like what the computer can actually do and i bet we could come up with some kind of pattern of zeros and ones or equivalently light bulbs that tell even spot what to do maybe go up or down or left. And it could certainly do this autonomously by using various sensors we need to keep things safe today or using wifi and sending spot these very instructions but what's happening tirelessly with our friend andrew here is essentially he's sending spot instructions just encoded tirelessly somehow as patterns of zeros and ones and the folks at boston dynamics who built this robot program spot to recognize certain patterns as meaning up a certain pattern is meaning down left right and any number of other things so in fact spot come on over here. Could come on of so spot for instance may very well have a pattern of zeros and ones that represents shake shake spot so he could do that and any number of other movements as well and maybe especially with sensors here and also a little human help over here for today what if we went ahead and did something maybe ask spot some questions so let's go ahead and we'll start simple spot here we have some bits. Off off on spot what is this representing off off on correct i think so kind of like very horse in of thank you all right so a round of applause for spot here all right so spot what if we turn of we'll turn that one off here how about we turn this one on so it's off on off spot what's this. Is that correct nice of how about one final flourish how about spot instead of off on off let's go ahead and do off on on so think in your minds eye what the answer should be all right spot off on on of and a round of applause for spot. As well so this is to say no matter how fancy today is hardware or software is it really just boils down to representing information and instructions and computers and phones and the like really are just operating on those same pieces of information whether implemented in zeros and ones or with really anything else all right so where can we take this once we have this agreed upon system for real. Representing information well it turns out that using three bits three 0's and 1's at a time isn't actually all that useful and you and i even in conversation don't often say the word bit we say the word byte and what is a byte if familiar yeah so it's just eight bits it's just a more useful unit of measure and it happens to be a power of 2 2 to the third which just makes match work out cleanly but it's just a convention to have more interesting units of measure than individual bits so a byte is a byte. So for instance this represents using eight bits eight light bulbs the number you and i know is 0 and this byte of all one bit now you've got to do some quick match represents what number instead so it's all ones eight of them total how about over here on the end so it's indeed 255 now that's not kind of match that you need to do in your head for a class like this but you could this is the ones place twos fours. 8 16 32 64 128 and because they're all 1 you just have to add up all of those columns values and you get 255 but a little mental trick too is that if you've got eight bits and each of them can be two possible values 0 or 1 that's like two possibilities here times 2 times 2 times 2 times 2 8 times so that's 2 to the 8 so that is maybe a little easier to do that's 256 or easier in the sense that you get used to seeing these numbers in is. That's 256 but wait a minute how do i reconcile this with your 255 because you start at 0 so you sort of lose 1 on the high end because we started counting and representing the number like 0 all right questions on how we've represented just numbers or for instance instructions to spot thus far any questions on binary nary or the like no all right so seeing none. Escalate a bit so how do you represent letters because obviously this makes our devices more useful whether it's in english or any other human language how could we go about representing the letter a for instance if at the end of the day all our computers all our phones have access to is electricity or equivalently switches or metaphorically tiny little light bulbs inside of them that can be on and off that's it there's no more building blocks to give you how could we represent something like the letter a. Yeah how about here yeah perfect so we could just assign every letter a number and we could do this super simply like maybe 0 is a and 1 is a or maybe 1 is a and 2 is bit doesn't really matter so long as we all agree and we all use the same types of computers in some sense ultimately well for various reasons the humans that designed this system they went with the number 65 so nowadays any time your computer is showing you the capital letter a on the screen underneath the hood. So to speak it's actually storing a pattern of zeros and ones that represents the number 65 and it tends to use seven bits or typically eight bits total even if it doesn't need all of those bits in total so how do we get there well here for instance is that same pattern here is that pattern of bits that represents 65 and why well quick check here this is the ones place twos fours eights 16 30 two 64s place of. Plus one gives me 65 so that is to say here's how a computer using some light switches so to speak would represent the number 65 and our macs our pcs our phones just all know this so whenever they see that in their memory so to speak they show a capital letter a on the screen so that's it that's a system known as as ii the american standard code for information interchange and the a is actually operative there because we're only talking thus far about english letters in our alphabet and in fact. I claimed a moment ago that we only use seven maybe eight bits to represent letters of an alphabet so just to come back to you if i may how many possible letters of the alphabet could how many possible letters of any alphabet could we represent with eight bits 256 the numbers 0 through 255 now that's more than enough for english because we've got a through a uppercase lowercase a bunch of numbers a bunch of punctuation symbols but in a lot of languages with accented characters a lot of asian characters this is not nearly enough. Memory or bits with which to represent all of those possible values so we need to do a little better than as ii but we can build on top of what they did years ago so here is a chart of as ii codes it's just a bunch of columns showing us the mapping between letters and numbers so for instance up here is the capital letter a 65 capital a 66 capital a 67 dot dot dot 72 is a 73 is i and so forth there's some weird things over here like special symbols that we'll learn about over time. But there's a mapping between every english letter of the alphabet and some number just as you propose both for uppercase and lowercase so for instance if we highlight just a few of these for now and i say that i've just received a text message or an email that underneath the hood so to speak if i have the ability to look at what switches are on and off i've received this message here well first and this is not what is is about but just fun fact does anyone know what number this would represent in decimal. Is the binary pattern ones place twos place 72 is correct and again not intellectually all that interesting and this is not the kind of match that we spend all day as yes a computer scientist doing but it's just following the same darn pattern which is to say it might look cryptic but conceptually intellectually it ultimately is exactly as we did before so yes i'll spoil the rest of the match it's 72 73 33 now anyone remember in your minds eye what message we just spelled yeah. So it is in fact high though no one really said that excitedly what's the 33 if you noticed of so a lot of people notice yes it's an exclamation point and that's indeed noticeable right here 33 is the exclamation point and that's just something eventually that might sink in but for the most part if you remember capital a is 65 you can figure out at least 25 other answers to these kinds of questions because they're all contiguous like that so there is the exclamation point but at the end of the day we might just have this mapping known as. And it's how our phones and computers and devices more generally actually store information so we thought we'd maybe take a little pressure off of me here and could we maybe flip things around how about we try applying this newfound knowledge if it's indeed new to you with like seven volunteers seven bits if we could of so your hand first come on down maybe your hands there of three come on down over here how about four and five yeah come on down yep and the black shirt yep how about let me go farther. How about in the green over there and how about you seven over here all right come on down come on down show a round of applause for our brave volunteers all right so if you'd like to stand roughly side by side here in the middle of the stage first of all thank you let's see one two three four five six seven perfect of and let's go all the way over to this place here. If you would like to introduce yourself i'm rachel richie and what year first year concentrating in is welcome to the stage next hi i'm king also first year concentrating in is hello my name is lam i'm a as student from the education department nice of next hi i'm jordan miller concentrating in economics and maybe some is. Hi i'm natalia first year and the one at the is hi i'm khaki a i'm a first year and i want to docs hello i'm caleb and once again first year concentrating at is of wonderful a pattern yes thank you thank you so if you haven't guessed already each of these volunteers is going to represent a bit from left to right or right to left in this case so let's see if you want to represent how about the choose place how about the for place. 8th place 16th place 32s 64 and 128 although wait i think i screwed up we needed 1 8th volunteer i think you know well i think spot of come on over if you guys could step forward a little bit and then scotch this way just to give spot some room so spot will represent the ones place now what our volunteers have on the back of their sheets of paper are little instructions. Spell out a three letter word in english by using three bytes from left to right because now we have eight volunteers i'm going to propose that you raise your hand if you're supposed to represent a 1 or you just stand there without raising your hand if you're meant to represent a 0 and what we'll have the audience do is do the quick match to figure out 1 2 3 each letter what number is it what letter is it and we'll see what word that we finally spelled all right so in round one you have instructions on your back of your sheet. That will tell you to what your number is if you're 0 stand there if you're a 1 raise your hand what number do these guys seem to be representing 66 i think 64 plus 2 so 66 which is the letter of so book so ball right hands down second letter is going to be spelled how. All right what are we spelling now of now what number are we spelling 79 i heard which is the letter of of so hands down thank you ipod. One final flourish so we've spelled to third letter go ahead what number now is this i heard it here 87 which is a which of course spells bow so if our volunteers could take a bow spot included so this will make more sense. In week one when we have an assignment involving a certain someone from the nintendo world but we have a lovely parting gift for each of you thank you for volunteering you might need to share with the folks next to you of here we go there we go thank you so much one more round of applause if we could for our volunteers thank you of all right. Spots had it so let's see then if we've solved now the problem of representing english letters of the alphabet being able to spell out words like bow to a what if we actually do have accented characters what if we do have other glyphs that we want to represent well here of course is a standard us english keyboard which a lot of you might have but there's also characters that you can type much more easily if you have a foreign keyboard relative to the us or with certain keystrokes on your own mac pc and phone but nowadays too there's this menu that probably you've used in the past. Like our or two to actually send some emo i an emo i even though they look like pictures and they actually are pictures on the screen they're technically just characters characters of an emo i alphabet that happen to use a certain pattern of zeros and ones to represent each of these faces each of these people and places and things and it turns out that one of the reasons that we have just so many such characters nowadays is because we now use uni copes. Instead of as ii so unicode is a super set so to speak of as ii which is to say that we humans realized some time ago that just using eight bits to represent letters of the alphabet certainly isn't very good when we want to represent other non english languages so unicode doesn't just use eight bits it sometimes uses 16 bits per character sometimes 24 bits per character and sometimes even 32 bits per character now why those numbers that's just one byte two bytes three bytes or four bits. And that gives us does anyone know that gives us the ability to represent as many as like 4 billion possible characters because if the longest one is 32 bits that's 2 to the 32 which if you do out the match trust me is roughly 4 billion so that's a lot of characters and we've got a lot of room then for these emo i but it's not just about having sort of fun pictorially on the screen unicode mission really is to represent and to preserve all human languages digitally both past present. So it is really about capturing the entirety of sort of human knowledge as we've expressed it in language but also giving this newfound ability that's been used centuries ago too in writings on walls and the like pictogram via which we can still communicate even independently of our own human language so we'll reduce it today to just patterns of zeros and ones but the problem being solved is much greater and well beyond is itself there so here is a pattern of zeros and ones using unicode so more than 8 0. Bit that represents a very popular emo i which might be a bit of a hint this is the most popular emo i as of last year at least statistically internationally does this help it's roughly this number here no it's this one here so this is the most popular emo i by most measures as of last year but it doesn't always look like this those of you who have a mac or an iphone recognize this symbol perhaps immediately those of you with android devices. Or other platforms might notice that it's the same idea but it's a little bit different and this is because too emo is at the end of the day just represent characters but those characters can be drawn can be painted in different ways and reasonable people will interpret differently this emo i whose official name is face with tears of joy and indeed google interprets it a little differently from apple versus microsoft versus meta versus other companies as well so you can almost think of those different companies as having different fonts for emo i. And that really starts to connect things to the world of text and characters so just so you've seen it more on this another time it turns out that emo i and really characters in general we don't use binary zeros and ones to represent them because no one myself included is going to recognize what's what it's just too much match it's not interesting and even decimal numbers that was like 4 billion or something i don't remember which number is which so we represent things a little more compactly and this too admittedly still looks cryptic but this is a unicode code point that uses another system. Mathematically called base 16 or hexadecimal more on that another time but it's just a way of representing numbers even more succinctly writing less on the screen because you're using not just 0 through 9 as in decimal but you're using a through of as well so a few letters of the english alphabet come into play but for now that's just a little easier to remember for people who care that that is the number that represents face with tears of joy but what if we want to customize emo i and this increasingly is the case. Here for instance are the five skin tones that phones and laptops and desktops nowadays support it's based on something called the fitzpatrick scale which essentially categorizes human skin tone into six or in this case five different categories from lighter to darker but this sort of suggests that wow if we want to represent people with five different skin tones like this that could kind of significantly increase how many unique patterns of zeros and ones we need for every possible face but if we think about it from an engineering perspective we can. Actually just think of skin tone as modifying some default color for better or for worse and yellow was sort of the de fact default sort of simpson style but to modify it to look more genuinely human like from lighter to darker well maybe we just use the same pattern of bits to represent a human thumb for instance thumbs up or thumbs down and we just then modify that character to be displayed with a different skin tone so for instance here then is the thumbs up that you might use on various platforms and let me just stipulate that this is the unicode code point that is the number. That max pcs and phones use underneath the hood to represent the default yellow thumbs up but if you want to give it like a medium skin tone you still use that same number that same pattern of zeros and ones or switches underneath the hood but you use a few more switches that the computer or phone will interpret as of you don't want to see the default in yellow because of this second number that's in the computers memory somewhere you want me to adjust it to be the medium skin tone or any of the other values instead so that's sort of the engineering. To this problem of just trying to represent different ranges of emo i here well what about something like this there's a lot more combinatorial nowadays on your keyboard for relationships for instance so here is a couple with heart here so the couple here of course is represented with apparently this number here but that's it but if you want to be more specific like man and woman or man man woman woman it's the same idea but we just need to express ourselves with a little more information so for instance the way the unicode folks are doing this. Came up with years ago to represent for instance a woman with a heart and a man from left to right would be using these values so things just escalated quickly but only in the sense that we're using more bits more zeros and ones to represent more expressively this particular combination so this happens to be the number in unicode that represents the woman at left this is the number that represents the man at right and this is the pair of numbers that represents the heart in the middle sometimes red sometimes pink displayed here as pink. To change the combination for instance to be say woman if we want to change the combination to be woman woman notice that now the left and the right most numbers match or if we flip it back to man man it's just using different numbers on the tail ends again and meanwhile if i rewind there's these two identical values here these are called zero with joiners or wide characters it just is a special number that humans reserve to say glue the emo i at the left to the emo i on the right and so forth. So it kind of connects ideas in this way so there's actually a lot of emo is nowadays that are a combination of different things like heart on fire is one that's technically the combination of a heart emo i the fire emo i joined together numerically in this way so computer scientists who come up with these things are just sort of reducing things to representations all we have at our disposal are zeros and ones so we all just need to agree ultimately whether we're google microsoft or the like how we're going to standardize these kinds of things as they are. Information questions then on how characters are represented in a computer be it english or any other language yeah how is the what of the a plus is just a convention really so a plus represents a special unicode character which is a a with a plus in the middle and this is just the convention for saying hey everyone here comes a number that represents a unicode code point the a and the 1 have no. Sorry the a and the plus have no mathematical significance it's just a visual clue to folks other questions on representing text in this way all right so what about color we've already started looking at pictures well how are those pictures be it emo is or anything else represented one of the most common ways is just with rob red green and blue it turns out that if we just keep track of how much red should be on the screen and how much green and how much blue combined together that gives us every color of the rainbow. From white to black and everything in between so how do we represent an amount of red and green and blue well frankly just with three different numbers and this is how computers typically represent color every one of the dots on your computer screen or your phone screen is called a pixel and every single dot underneath the hood has three numbers associated with it so three numbers three numbers three numbers for every little dot and those three numbers together say how much red green and blue should the device display at that location. If you had a dot on your screen that said use this much red this much green this much blue because each of these numbers i'll tell you are one byte or eight bits which means the total possible values is 0 to 255 let me just ballpark that the 72 feels like a medium amount of red because it's been between 0 and 255 73 is a medium amount of green and 33 of blue is just a little bit so if you combine a medium amount of red green and a little bit of blue anyone want. Guess what color of the rainbow this is sorry brown so at close it's a little more yellow than it is brown but if we combine them it looks a little something like this this is a is trivia not something that even i would be able to eyeball unless i came up with that particular example but wait a minute we've seen these numbers before 72 73 33 represented what a few minutes ago so it meant high but here i am claiming no no no no that means yellow how do you reconcile this well at the end of the day. This is all we have zeros and ones whether you think of them as numbers or letters or even color now but it depends on the context so if you've received a text message or an email odds are the pattern of zeros and ones that the computer is showing you are going to be interpreted as text because that's the whole point of a text message or an email if though you opened up mac loss or loss or windows or androids calculator app the same pattern of zeros and ones might be interpreted as numbers for some addition or subtraction. Or whatever if you open the same pattern of zeros and ones in photo shop like a graphics program they're going to be interpreted in that context as color so context matters and indeed as soon as next week when you start writing code in that language called a the onus will be on you the programmer to tell the computer interpret the following sequence of bits as a number or a letter or something else and you won't have to even worry about what the zeros and ones are but you need to give the computer a hint as to what type of file or piece of data you're representing. So that gives us bits and you can actually see these dots these pixels on the screen let me zoom in zoom in and here we have it just with this emo i which at the end of the day is a picture that someone at apple in this case drew and you can see if you really zoom in or take your phone or to and really put it close to your face you'll see all of these dots depending on the hardware and each of these dots these squares is storing 24 bits or 3 bytes 24 bits 24 bits 24 bits and that's why dot dot dot. If you've got a photograph for instance that's like three megabytes which is three million bytes well odds are there's one million pixels therein because you're using three bytes per pixel to represent each of those color that's a bit of an oversimplification but that's why images and photos are getting bigger and bigger nowadays because we're throwing even more pixels into the file music how could you represent music digitally. Just zeros and ones or numbers really any instinct whether a musician or not yeah yeah so we can just represent notes by a number so a is some number and a and maybe sharp or flat is some other number but note might not be quite enough for some yeah a of so one note one number to represent the note itself the sound or the pitch one other number to represent the drum. Like in the context of piano like how long is the human holding the key down and maybe i can think of a third like the loudness like how hard has the person played that note so minimally with three numbers you could imagine representing music as well and indeed that very well might be what computers are doing when you listen to sound what about video how could you represent videos as well yeah yeah many images so if you've ever produced a film or looked at some of the fine print 30 frames per second fps. Or 29 frames per second is just how many pictures are flying across the screen but that's really all a video file is on a computer lots of pictures moving so quickly in front of us that you and i our brains interpolate that as being actual motion and in fact from yesteryear motion pictures it's like pictures that are giving the illusion of motion even though there's only 30 or so of them flying across the screen so we have a way now to represent information both as input and output whether it's numbers letters images anything else. On what's inside of that black box so to speak wherein we have algorithms step by step instructions for solving some problem now what do i mean by algorithms or step by step instructions well maybe if we were to turn this into code and that's how we'll connect the dots ultimately today code is just the implementation in computers of algorithms an algorithm can be something we do in the physical world code is how we implement that exact same idea in the context of a computer instead and here for instance this is very simple. Common application inside of a computer for your context this is like the is version of the icon and typically if you click on that icon you'll see something like all of your contacts here typically alphabetical by first name or last name and your phone or your computer lets you often search for someone's name at the very top and it will sort of auto complete and it'll be pretty darn fast but it'll be pretty darn fast because the programmers who implemented that application are looking for someone quickly for you now i can do this sort of old school style. Whereby we have one of these things from yesteryear an actual phone book so in a physical phone book like this you might have like 1 000 pages and on every page are a bunch of names and a bunch of numbers and as i flip through this i could look for someone specific so suppose i want to call john harvard whose first name of course starts with a a well i could just turn page by page looking for john harvard and if he's not there i keep turning and turning so this is an algorithm i'm stepping through the phone book one page at a time. Time is it correct this algorithm assuming i'm looking down so yeah i mean it's kind of stupidly slow because why am i wasting my time with the as and the bus and the so forth i could probably take bigger bites out of it but it is correct and that's going to be one of the goals of writing code is to of course solve the problem you care about correctly so correctness sort of goes without saying what's the point of writing the code or implementing the algorithm all right well let me at least speed things up so instead of one page at a time so 2 4 6 8. That 10 12 14 16 and so forth it's a little hard to do physically but it sounded faster it was twice as fast theoretically but is it correct so no why yeah yeah i might miss john harvard because just by accident he might get sandwiched between two pages but do i have to throw the algorithm out altogether like probably not like once i reach like the a section which is past the a section i could double back at least one page at least and just make sure i didn't. So that sort of is twice as fast because i'm going two pages at a time plus one extra step so it's still an improvement so the first algorithm worst case if it's not john but someone whose name starts with a that might take me a full thousand steps the second algorithm is just like 500 steps because i'm going two pages at a time plus one in case i have to double back but that's in the worst case but most of us in the in yesteryear and what apple and google and others are actually doing is in software or here physically we're typically in the same place. Going roughly to the middle especially if there's no cheat sheet on the side like a through a i'm just going to go to roughly the middle now here i am not surprisingly in them section but what do i now know if this is them section where is john harvard so clearly to the left alphabetically and so here is where we can take a much bigger bite out of the problem we can really divide and conquer this problem by tearing the problem in half throwing half of it away 500 pages away leaving me with a half. A smaller problem half as big that i can really just now repeat so i go roughly here and now i'm in the a section so i went a little too far back but what do i now know if this is the a pages where's john so now he's to the right so i can again hopefully he's not on that page i can tear the problem in half again throw that 250 pages away and now i've gone from 1 000 to 500 to 250 pages like now i'm moving because the first algorithm was one page at a time second was two this is hundreds of pages at a time. Roughly again to the middle roughly to the middle roughly to the middle hopefully i'll find john harvard on one final page you can only do this once but one final page so that kind of invites the question i would think if the phone book does have 1 000 or so pages how many times can i divide the problem in half to get down to one last page so it's roughly 10 and the quick mathis like 1 000 goes to 500 to 250 to 125 to like 67 something so we have to deal with rounding issues eventually but assuming we work out the match. It's roughly 10 page tears and that's crazy faster than 1 000 pages and still faster than 500 pages so it's sort of fundamentally better and indeed if i finally get to that final page in the software world you'd see something like this john harvard and his number which you're welcome to call or text but that's how we now have our answer much like the single page there but let's consider just how efficient that actually is so here's a very rough broad with broad stripes. So here's an by plot so here on the horizontal is going to be the size of the problem and by that i mean how many pages are we trying to go through this would be zero pages this would be a lot of pages how much time does it take to solve the problem how long does it take to find john harvard or anyone else this means like no time this means a lot of time so what's the relationship among these algorithms well the first one is actually just a straight line if there's a pages in the phone book well i claim that it's kind of a one to one relationship. Because if verizon or the phone company adds another page next year that just means i might have one more step next year as well to find john harvard or anyone else but the second algorithm it's also a straight line but it's lower even though it might not look obvious and what do i mean by that well let me just draw some temporary lines if this is how many pages are in the phone book dot dot dot notice that it takes this much time on the red line to solve the problem but if i instead use the second algorithm it takes me half as much time. So even though they're both straight lines one is strictly lower than the other which means it's faster it's better but the third algorithm is a fundamentally different shape and it looks a little something like this and it looks like it's going to flatten flatten flatten out but it never does it just rises ever so slowly and what this means is that if maybe cambridge and austin here in massachusetts merge next year so we go from 1 000 page phone book to a 2 000 page phone book that kind of means like if we're here this year we're over here next year it's not a good time. But it would be much higher if we were using the first two algorithms why it'd be an extra thousand steps to find someone in that combined phone book or maybe another 500 steps but to be clear if we're using my third and final algorithm how many more steps will it take me next year when cambridge and alston merge into one 2 000 page phone book just one more step no big deal it's one more page tear and this is what we mean ultimately about not just writing code or implementing algorithms that are correct but now that are running. Well designed or efficient specifically and this is what makes someone a better programmer perhaps than someone else or a better problem solver than someone else is acquiring over time these skills so that sure you could solve the problem sort of quickly and dirty so to speak but if you're going to have a lot of data eventually be it in your phone book or maybe your google website index if you're searching the web you're going to want to try to think about how to design algorithms that look like this mathematically this is called a logarithm and it's log base two because i'm having having having again and again. But just know that it's a fundamentally faster and different shape so among our goals in cs50 ultimately it's not just to write and solve problems correctly but ultimately ever more efficiently as well any questions then on these ideas of efficiency and design any questions here yeah in back a good question just to repeat can a graph like this capture the accuracy of the algorithm short answer no for instance if i drew a graph. Through a straight line that is super low on this graph which would imply that the algorithm takes the same amount of time no matter how many pages there are my algorithm might actually be to just pull a random page from the phone book one step and say here it is but that's not necessarily going to be accurate unless i get really really lucky so the graph really only speaks to efficiency and the design of the algorithm not the correctness of it to analyse the correctness you need to use another mechanism altogether namely logic other questions now. Efficiency in this way all right so with that in mind let's begin to translate this to some actual code and in fact before we look today at one actual programming language albeit a graphical one let's consider something called pseudo code so pseudo code has no formal meaning generally you write it in english or whatever your own human language is but you write your thoughts down tersely succinctly but precisely you try to really convey your thoughts not with a wave of the hand metaphorically but step. By step precisely so what do i mean by this here might be some representative pseudo code via which i describe that third and final algorithm in a way that i could hand it to you and you could do the same at home or i could hand it to someone at google and they could implement it in android or i could hand it someone apple and they could implement it in is so step one i claim was pick up phone book step two was open to the middle of the phone book step three look at the page as i did and now things get a little more interesting. If person is on page i have to make a decision presumably what should i do if john harvard is on the page i'm looking at so stop and probably make the call or email or whatever the goal might be and so i'm going to actually indent this visually by a few spaces just to make clear that you should only do line five if the answer to line four is yes otherwise you don't bother the next thing i'm going to do line six is consider another possibility if the person i'm looking for is earlier in the book. What do i want to do well i could describe this in a bunch of ways i'm going to do this tersely as follows open to the middle of the left half of the book so open to the middle of the left half of the book and then what am i going to do well i've just kind of divided the problem into something smaller but it's fundamentally the same problem it's just a fewer number of pages so i'm just going to go back to line three and do it again because the problems just getting smaller and smaller presumably else if the person i'm looking for is later in the book open to the middle. The middle of the right half of the book and also go back to line three but there's a fourth possibility and it's failure to realize sometimes that there's other possible outcomes that make computers crash or spinning beach balls or the like if a programmer doesn't anticipate some situation what's the fourth possible situation when looking for john harvard if they're not in the book at all and indeed i might get to the very last page and john harvard not even on that one i'd better handle that and say. Like kind of as a catch all just quit altogether and truly often your macs pcs phones when they freeze or again spinning beach ball or the like and just weird things happen that's just because some human made a dumb mistake and they didn't realize that you could somehow get your phone or your laptop into a configuration that they didn't anticipate so we're going to try to handle that here now this is just one way of writing pseudo code there's no one way to do this all of us in this room could come up with slightly different pseudo code but i think you'll find characteristic are certain building blocks in all. All of our answers here in yellow are what as of today we're going to start calling functions technically speaking these are like actions or verbs that literally in this case tell me what to do next we're going to have these things conditional sort of forks in the road so to speak that take me down this path or another metaphorically so i do this thing or something else but how do i decide if i want to go this way or this way or this way or this way i need to ask a question and in programming we'll typically use what. Called boolean expressions named after a mathematician book and a boolean expression is essentially just a question with a yes no answer a true or false answer a one or zero answer it doesn't matter how you think about it but it's got two possible answers and so you can kind of think of these as being expressions with question marks even though i didn't draw such person on page person earlier in book person later in book those are boolean expressions and they just tell me whether i should go down one fork in the road or another. And lastly there's this go back to line three in two different places that represents what we call a loop like some kind of cycle that's doing something again and again now these are just a few building blocks here functions conditionals boolean expressions loops but you'll find that they're characteristic of so many different languages one of which we'll look at today another of which we'll look at next week and those include indeed a and python and other languages still and so this is why we focus on these basics and fundamentals in these early days because we're going to see them again and again. That firehouses hitting you sometime will give you today ultimately more visuals by which you can hang on to so as to actually write code ultimately in different languages and solve all sorts of problems now we'd be remiss in not bringing up sort of what's behind characters like spot and chat it and other software artificial intelligence and it turns out to get to the point of a we're actually going to need more building blocks than just functions and loops and conditionals it's not going to be quite that simple but this has been a lot so far let's go ahead here. Take a five minute break and when we resume we'll take a look not only at a but also a specific language called scratch so no cake just yet but we'll come back in five before we dive back in i just wanted to call out a special guest that we have here today beyond spot someone who's come from even farther away and in fact if any of you have taken cs50x the open course are version of the class or dabbled in it over the past few years in some of cs50's online social communities you might have had your questions answered by a certain. Certain human from new zealand and she's come all this way today to spend this lecture with us this is cs50's own brenda anderson if you might come up for acknowledgment from all of us here it's not much but just a little token of our thanks brenda has helped truly thousands of students online for the past many years and in fact her own daughter has been the artist behind the duck. That's about to loom large in cs50 this year and beyond so thank you to brenda all right so it's hard to escape a discussion of artificial intelligence nowadays but we thought we'd use this as an opportunity to connect some of these dots because indeed over the course of the semester we'll not only be talking about artificial intelligence or a but really using it all the more constructively to help you solve problems. Help you get unblocked when you hit a wall cognitively or syntactically when writing code and indeed it's no accident that we have this duck here looming large which is really the embodiment of the sort of a that you'll experience within cs50 itself this year so let's talk about this so called chat bot that inspired some of those headlines with which we began class that weren't quite on the nose so the class will still be taught by us humans but helped by this sort of cs50 duck a chat bot of sorts now what do i mean by that. By this well it turns out that when it comes to implementing something like an artificial intelligence we don't quite have all of the building blocks yet certainly after just today is week zero to implement something like that but i think we can sort of skate in that direction intellectually so for instance if we were to take a stab at implementing our own chat bot some interactive test space program that talks to us and answers questions and the like we could try borrowing some of today is ideas already those functions conditionals loops and more. And i could write something like this if i am writing code or pseudo code for a chat bot i could program the chat bot to do something like this if the student says hello to the chat bot then the chat bot should say hello back else if the student says goodbye well the chat bot should say goodbye back else if the student asks how you are the chat bot should say that it's well but things get a little harder when you start asking more interesting questions like else if the student asks why 111 in binary is 7. In decimal now you could imagine that we just have a conditional with this boolean expression that programs the chat bot to just give you the answer and explain in an english sentence why that in fact is but what if you the student asks why 110 is 6 in decimal or why 010 is 2 i mean you can just imagine the explosion in the amount of code that we would have to write to just anticipate every darn question that you might ask about today. Not to mention all of the knowledge in the universe so surely there are other ways to implement algorithms that allow something like a chat bot or a more generally to be fed input still like all of the internet all of the world wide web all of the pages and textual content they're in but to let it just figure out how to answer our questions based on those kinds of inputs assuming the inputs themselves are accurate so large language models is a term you might have heard bandied about over the past several months or elms and a lot of them. Large language model really is an implementation in software of code that actually takes as input lots and lots of language like the text of lots and lots of web pages dictionaries encyclopedias wikipedia is and the like and sort of infers from the patterns of english words or any human language what a typical human might actually say when asked a question and some of these questions are easy right probably on the internet alone not to mention everyday life if someone extends their hand and says hi how are you. So odds are like with 90 probability you're going to say good thanks how are you so i bet we could write software that just infers what it should say probabilistically statistically based on those kinds of patterns online and that's indeed where the world is starting to go when it comes to the most sophisticated of algorithms where you and i the humans we don't try to anticipate every possible input rather we give it a more general purpose input like all human knowledge and ideally just let it figure things out now we're not quite there yet and odds are you've heard. Heard of hallucinations or just mistakes that these large language models make but their inputs are imperfect and sometimes there's a bit of randomness sprinkled in because you don't want the thing to always say the exact same thing even you and i might say he i'm not that great today 10 of the time so you need to perturb the output in some way but within cs50 and within this world of large language models we do have these tools like chat get and being chat and others and we'll stipulate that for cs50's purposes the direction we're going this year is that this is what's in the syllabus. Dot dot dot that it will not be allowed it will be considered not reasonable to use a based software other than cs50's own so the goal here is not to simply take away tools that are clearly inevitable in my view and clearly helpful and productivity savers but we'd like there to be some guardrails intellectually on just how helpful these chat bots are because as you've probably seen if you ask it a question these chat bots are already pretty good at not just helping you finish your current thought but it will hand you your second and your third thought and sort of do the assignment for you. But i think through prompting so to speak we'll be able to coax some of our own tools being computer scientists ourselves in a direction that you actually find to be the right balance akin to having a good tutor by your side 24 7 who doesn't just hand you answers but indeed tries to lead you to the same so you actually get something out of the experience and ideally three plus months from now those training wheels can come off too and you're able to still stand on your own so it will be reasonable to use cs50's own a based software which will actually take the form. Of a cs50 duck which is actually available now and we'll use it throughout the term it's cs50 a a web based application that's quite similar to chat get but that has the personality of a cs50 teaching fellow or of or teaching assistant to that also happens to think of itself as a duck and for reasons we'll get to in a couple of weeks time but rubber ducks in particular are kind of a thing in programming but more on that before long as you can even see from the one there on my desk with that said too i'm going to call. While out cs50's own brenda anderson whose daughter sophie kindly not only created the first incarnation digitally of this duck but also most recently once it actually did more than quack a random number of times in response to questions has now been virtually brought to life too so all that and more over the coming weeks but you'll find ultimately that the goal is to really bring to life the availability of an a based tutor that you have access to a friend next to you that will help guide you through a lot of the courses. As challenges along the way and we've actually rolled it out this past summer already with some of your predecessors through the harvard summer school one student wrote at summers inn that this duck felt like having a personal tutor i love how a bots will answer questions without ego and without judgment generally entertaining even the stupidest of questions without treating them like they're stupid it has as one could expect an inhuman level of patience so there's actually something really there because as many teachers as there are in cs50 myself the courses preceptors teaching fellows. And course assistants there's only so many of us and we're only awake so many hours of the day and i think you'll find too that we're on the cusp of something pretty remarkable in the coming years where it's going to get a lot more enabling now to learn material not only within the confines of a class but on your own ultimately as well and as one other student put it at summers end with respect to the duck love love love the duck we're friends now so that too awaits but first we're going to need to start with the basics and we started today by talking about the basics. About binary and darn it here it is again so we can't actually get to the point of using or solving or implementing a until we understand this and odds are most of you won't know at a glance what this piece of software does but these are the zeros and ones that represent perhaps the first program that any programmer writes which is now a clue to some of you who have dabbled in code before what does this pattern of zeros and ones tell a typical computer to do might someone guess it's going to have it say hello. Which is one of the very first programs that most any programmer writes should you be able to recognize these zeros and ones do i recognize these zeros and ones no not at all i just happen to know that they are the same and that was kind of a leading question but they are representing data and instructions ultimately data like he all of comma to re a and an instruction like print that data to the screen as for what these patterns of zeros and ones are this is not something that a computer scientist or programmer worries about. We just stipulate that of someone somewhere knows how to do this and it's probably someone like intel who makes the hardware inside of the computers but you and i starting now already in week zero can start to view binary more abstractly we don't care about the zeros and ones we only care that you can use zeros and ones to represent more useful quantities like numbers and letters color and more so this next week is going to be the code we actually start writing at a keyboard and this is that language called a. I myself learned years ago when taking cs50 when all we learned at the time was a but this too has some cryptic ness to it and if you've never programmed before you can probably wrap your mind around of i'm guessing the print prints out the hello world but what's with the semicolon the quotes the backslash a the curly braces the hash include and all of this stupid syntax a lot of this in the beginning of any class is really a distraction it is not intellectually interesting but it's the stupid kind of stuff that's going to trip you up quite often and so today. What we'll do is focus not on syntax characters on the keyboard but ideas because what really matters in this program is that print is a function here for our purposes and that function is to display information on the screen everything else as we'll soon see has value and will be understood by you before long but for now it's a distraction let's focus on those building blocks when it comes time to write code though for the curious especially if you've programmed before we'll use a very popular free and open source tool called visual studio. Code or is code we'll use a cloud based version of it that we are install everything you need in the cloud for you so you don't have to deal with headaches like getting your mac or pc to work you'll use instead this urls cs50 de but more on that in next week week one for now we'll use another cloud based editor called scratch and odds are some number of you use this probably as early as like middle school or the like and that was fine to create your own art animations games interactive art or the like but we'll use it today. For just a bit and we'll use it in the courses first homework a a a problem set 0 to explore now some of these same ideas and among the goals today for the remainder of today is not to focus so much on scratch and the particulars because this is not a language that you're going to use often but to give you very visual representations of ideas so that when things do escalate next week to a to the more cryptic it's the same ideas just typed out instead of dragged and dropped so by that i mean this. And share in just a moment the user interface of scratch but what's nice about scratch is that this is how we're going to implement that same program today these are two blocks or puzzle pieces on the screen and they've been interconnected to tell the computer to say hello world on the screen the user interface that we're about to use will look generally something like this it's a web based editor that you can also download it locally to use offline and you'll see that on the left here are a whole bunch of puzzle pieces or blocks they're categorized by the. By color and the blue ones tend to relate to motion for instance the purple ones represent looks the pink one represents sounds the yellow one represents events more on that soon the orange ones represent control and then there's operators variables my blocks and even some extensions we can install as well so we'll just categorize these things visually and colourfully so that you can sort of find what you're looking for but we're going to use these puzzle pieces to drag and drop them onto this area here and we're going to connect them. To do something what can they do well by default scratch comes with this cat here otherwise known as a sprite which is a character in a game or in a graphics context and this cat lives in this two dimensional world in which the cat can go up down left right and you can actually change the cats costume to be a dog or a bird or anything else it really is more of an idea than it is a specific animal in this case but the world that scratch lives in looks a little something like this it's like a cartesian plane with a coordinates and a coordinates. The numbers don't so much matter fundamentally except that when you want the cat or any character to go up down left or right by some amount it's useful to know for instance that 0 0 is the middle 0 0 for by all the way up is a a value of 180 all the way down is negative 180 all the way to the left is negative 240 all the way to the right is 240 and generally you're not going to have to worry about numbers you're going to use these relatively go right go left go up or down but that's just the world that scratches you. Itself lives in here so let's go about using scratch here i'm going to change over to my cloud based editor here where i've gone to scratch it eds and i've clicked create in order to create a project and that gives me this blank canvas here and i'm going to do these somewhat quickly because i kind of know what i'm looking for but part of the process with problem set zero is just going to be clicking and dragging and sort of scrolling around to see what building blocks exist but i know under events there's this puzzle piece here when green flags. So if i drag this puzzle piece anywhere into the middle it's just going to plop where i put it but what that means semantically is when someone clicks that green flag i want scratch the cat to do this other thing well what do i want it to do well let me go under looks and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to scratch and i'm going to go to go to scratch and i'm going to go to go to scratch and i'm going to go to scratch and i. And looks here in purple have some puzzle pieces like this well i can say hello for some number of seconds or i can just go ahead and say hello so let's do that i'm going to drag this say block and notice that as soon as i get close enough it's going to sort of magnetically want to connect so i can let go and they snap together automatically because they're the right shape i don't have to say hello exclamation point i can change it to the more canonical hello comma world so anything in this white oval is editable that you can change as just text there. Let me go ahead and click the green flag and voila this should be my first program in scratch hello world without any of the distractions of syntax or weird characters on the screen it's just done what i want it to do all right let me go ahead and click stop there and let me make it a little more connected to what we've discussed thus far so this puzzle piece here say hello world represents what type of building block using the vocabulary of today so it's a function so these purple blocks are functions say hello world. And let me give you another piece of terminology these white ovals that take textual input in general those are called parameters or arguments and they customize the behavior of a function so a parameter or an argument customizes modifies the default behavior of a function like in this case say similarly in the a code from earlier that we'll see next week the print function took a quoted phrase like hello world similarly as input but more on that in the future. So how does this connect to what the mental model we presented earlier well here's problem solving as i described it earlier inputs to outputs with algorithms or code in the middle well what we've got here really is an input of hello world the white oval the function or algorithm that it's going into as input is the say block and what is the output of using the say block the say function it's the visual effect of having the cat have the little speech bubble appear above its head saying hello world so everything we do in fact can be. Mapped back to that very simple idea of inputs and outputs well let's make it a little more interesting though it's a little boring to just say hello world all the time let me go ahead and drag this away and if you just drag it to the left and let go it gets automatically deleted let me go under sensing in light blue here and you'll see there's a bunch of blocks one of which is an ask block an ask function which is going to prompt the human me for some input so let me go ahead and drag that over here and it snaps together. I could change the question but i'm of with that question we'll use what's your name but notice that this block ask is a little special it is not just going to display like a speech bubble on the screen it's actually going to return a value and this is another term of art today and onward a return value is some value that can be handed back to you conceptually from a function so that you can do something with it it's as though the ask function asks someone for their name writes it down on a piece of paper and hands you the piece of paper you could do anything now that you want with that name. And here is how you access the name in this special block called answer which again we'll start calling a return value so if i want to say hello to someone specific i'm going to do this let me zoom out let me go back to looks and let me go back to say and i'm going to change the say block here to hello comma then i'm going to zoom out well i need two inputs i think so i'm going to grab another say block and i'm going to put it below and i could just type david but this is going to defeat the whole point. Of asking me for the name and it will only work for me so i don't want to do that so let me go back to sensing and notice the shape is important here even if it's not quite the same size the shape matters and i can actually drag this and change the input of this say function to be whatever that return value is that piece of paper that has the persons name on it and it grows to fill but now we have a program that i think when i click the green flag watch is going to prompt me what's your name and now i have room to type down here. I'm going to typed a a id i'm going to hit enter and it should say hello david huh maybe that was he didn't work a a a id here we go hello david it's missing the hello but i'm quite sure we have a hello right there so what explains this bug or mistake yeah exactly. It's just my put another way my mac my pc it's just so darn fast that it did exactly what it was supposed to but it said hello david so fast that we didn't even see we being the human the slowest part of the puzzle see the actual hello so there's a few different ways to fix this as you know we could have it say hello for some number of seconds so i could kind of do that so let me do this i can decouple these by just dragging and letting go so that they're magnetically far apart let me go ahead and drag this one say hello for two seconds i'm going to change the grammar here. To be hello comma again i'm going to go ahead and disconnect these two i'm going to throw away the old one that i don't want to use and i'm going to reconnect this so that now of it's going to say hello for two seconds and then my name hopefully so let me click stop and start a a a id enter of so it's better but it's kind of like poorly implemented like come on i just wanted to say hello comma david why is that that hard well maybe we can actually. Combine these a little differently and let me propose this let me actually get rid of these blocks again and let me go ahead and just say one thing but can i somehow combine this to say hello david all in one breath well it turns out if i go under operators i know from having played with this before that there's this puzzle piece down here called join and it's a circle or it's an oval it's a little big but again it will grow to fill and by default it wants to join two words apple and banana but whoops but those are just placeholders. So let me go ahead and drag this over the default hello let me change apple to hello space and then banana let me go back to sensing let me grab answer and drag and drop that so now notice that i'm kind of layering my ideas and put another way the output of this join block is presumably going to join two things together apple and banana or hello david and then the output of join is going to become the input to say. It's still correct but it's just better so if i type david and hit enter hello david this is what a normal program would presumably do not show you part of the phrase and then the rest of the phrase it gets just better in this way so let's connect this now to this same puzzle piece in this methodology so here's that same puzzle piece ask how do we fit it into this input and output flow with algorithms well the input to that puzzle piece is something like what's your name question mark then the algorithm or the question mark is the input. Code implementation thereof is this ask block and wait so the human has a moment to type their response in the output of that function recall is a return value you don't see anything on the screen by default because we've not used say yet but we get this return value and let me scotch everything over now so that we can now join those inputs together so here's this puzzle piece let me go ahead and propose that the inputs now to the join block are two arguments or two parameters so to speak hello and answer. They go into that join puzzle piece whose purpose in life is to return one joined version thereof let me slide this all over logically now so that now that output becomes the input to the save block and now is why the cat has the speech bubble saying all at once hello comma david so what we've done here is kind of composed the output from one function into the input of another and you can think of this in a couple of different ways left to right as i did there we're kind of like stacking these things on top of one. But at the end of the day even as programming gets more and more powerful for us it's just inputs and outputs inputs and outputs and thankfully with built in functionality from our friends at it who designed scratch i can even do something playful like this i can go to that extensions button at the bottom and there's a lot of fancy things i can add here like text to speech so let me go ahead and choose text to speech and let me go ahead here and change the say block in purple let me get rid of the say block and let me bar. Let me get the speak block like this and now let me drag and drop this oval it's going to grow to fill and i think it's just about to be a little more interesting let me click play now and hopefully this isn't too loud a a a id enter hello david of thank you thank you that's a low bar let me go ahead and set the voice to and you might now remember how we began class where we had a robotic computerized voice well we didn't use scratch. At the time but we could change this in scratch alone to be a little different so a a a id hello david of little creepy but we can play all day long with that but the point is that these functions are just now doing something a little different but it's just these inputs and outputs well let's make the cat more like a cat let me go ahead and throw away all of this asking question stuff let me go up to sound and let me go ahead and drag the play sound meow until done and here too it comes with meow you can add your own sounds. And it sounds as well but i'm just going to use the default meow and here too hopefully this won't be too loud let's make the cat meow by clicking play of so a little piercing but it's cute and if i want the cat to meow twice i could just play the game twice all right but it would be nice to just get it to meow automatically two or three or more times so you know what i could do i could just drag a second one of these actually you know what i could even just right click or control click. Duplicate them but i'll just keep dragging and dropping there's different ways to solve problems and now let me click play of cat does not sound particularly happy so we could go under how about control we can wait one second now there's no room but it will sort of expand to give room for me so let me try this and now it's going to wait one second in between the house of let me stipulate that is correct if my goal is to get the cat to be. Meow three times hit meow three times but per our discussion earlier of algorithms and the design thereof this is not the best design thank you for playing along at home yeah in what sense is this arguably not well designed yeah i repeated myself which actually in programming tends not to be a good thing now it was easy i literally i almost resorted to copy paste which saves me time up front but just imagine a contrived scenario now. I want it to wait like two seconds in between all right it's not that big a deal i change it here and i change it here but what if the program is meant to me out 10 times then i have to change it here and here and here and here and here and eventually i'm going to screw up like humans are fallible i'm going to overlook one of them one time it's going to be one second another is going to be two and just stupid things will happen you're setting yourself up for failure if you design things poorly and so i would propose that we use another type of building block to solve this instead yeah yeah. Loop and just write minimal code but to accomplish even more functionality so let me throw away most of these blocks and let's go and grab this repeat block which we haven't used yet but it's right there and as the name suggests this will allow me to repeat something some number of times let me put these two puzzle pieces inside it'll grow to fill let me reconnect it to the green flag i'll change the default 10 to a 3 and now it's just sort of better. Because if now you want it to meow more times you change it one place if you want it to slow down you change it in one place there's no room for error and that's generally a good thing but you know this is silly like scratch comes with a cat why didn't it give us a puzzle piece called meow like why am i implementing the idea of meowing myself like that took me what one two three four puzzle pieces why isn't there just one puzzle piece that meows for me this too we can do in code be it in scratch or a or other languages too i'm going to go down to these per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per per. Of these pink my blocks here where i can create my own puzzle piece and i'm going to call this literally meow and i'm going to go ahead and just click of and notice that it's given me this new type of start connector it's a start puzzle piece that nothing goes above it but you can put anything you want below it and i'm going to go ahead and cheat here i'm just going to grab my existing code so to speak this is code i'm writing even though it's puzzle pieces and now let me just claim and i'll move this aside here is now an implementation of my own puzzle. Function my own block called meow whose purpose in life is to meow until done and then wait one second but what's powerful now is notice at top left now that i've made the block i can use it any number of times so i can grab this meow block drag it over here and you know what now that meow exists as an idea i can abstract that away and i'm just going to arbitrarily drag it way to the bottom i'm not deleting it i'm just putting it out of sight out of mind so that we can focus now on this idea. Of meowing is sort of better because it's more compact it does what it says and i don't care about the implementation details of meow so this idea of abstraction something we're going to use frequently to abstract something away is to simplify don't think about the underlying implementation details just care about what it does or what it's called someone has to care about the implementation details like me 30 seconds ago but here on out i don't need to care and so in fact you and i are using the abstraction that is scratchy. Because i don't know how to put a speech bubble on the screen i don't know how to create that sound meow it did that and they abstracted those pieces of functionality away already for us by just giving us these puzzle pieces we see here so the code will work the exact same but it's sort of better designed now because now i've abstracted away the idea of meowing but i bet i can improve this further can i get rid of the repeat block altogether and let me just tell the meow block. How many times to meow well let me go down to the bottom and look at the implementation details i'm going to right click or control click on this and i'm going to edit it so i'm going to make a change and i didn't do this before but i'm going to call it meow as before i'm going to add an input and just so i know what it says what it does i'm going to add the word times here so and i'm going to change this placeholder to a for a for numbers the go to placeholder anytime we want to talk about a number in is so now notice the puzzle piece looks a little different. It takes an argument or a parameter called a which represents the number of times you want the thing to meow now that doesn't do that yet so let me go back to my other code let me just decouple these temporarily i'm going to move my loop into my implementation of meowing but i don't want a hard code that is literally right the number 3 anymore i'm going to grab this circle this oval and put it there so now i've generalized the function so now it will meow any number of times. Zero on up by executing that loop and now more powerfully out of sight out of mind notice that my code just became so darn simple like my function is called meow it meows some number of times all i have to do is type a number there and it just works and i don't care anymore about those lower level so to speak implementation details so here no surprise if i type in the number 3 zoom out and hit play. It still works just fine so any questions on what we've just done here it's still just meowing but that's besides the point it's this creation of our own functions this modularity this abstraction that's going to be the idea that keeps coming back to us no all right so let's make this a little more cat like let me throw away all of this code and let me go ahead oops let me throw away this code first and then the rest of this code and let me go ahead and give myself another green flag block and let me go ahead and add. Let's create a cat that allows us to pet it by moving my cursor over the cat and maybe it likes that so it'll meow when i do that so let me go under control and let me grab this if conditional which we talked about as a building block earlier let me go to sensing and we haven't used this before but here is a weird sort of diagonal shape that says touching mouse pointer question mark so that's a boolean expression so i'm going to drag that and it's definitely the wrong size but it is the right shape so it will grow to fill. I want to ask is if the cat is touching the mouse pointer then go ahead and meow happily so let me grab the meow sound put it in there and so i think when i click the green flag to start the program and now i let the cursor the mouse pointer touch the cat we should hear huh huh doesn't seem to be working there's a bug or a mistake in this program too what did i do wrong yeah. I don't need to specify the sprite explicitly because a detail i didn't discuss earlier in the bottom right of the screen notice that the cat is already selected so this code relates to that cat so your instinct is good if we had two or more sprites but i just have one so i'm covered there other thoughts yeah it only checks once so i click the green flag the computer did what i told it to do the mouse pointer was not touching the cat at that moment. Because it was touching the green flag so of course it didn't meow so what maybe is the fix here what puzzle piece can we add of so of interesting solution so let me go ahead and under control let me grab a wait one second i'm going to change the one to five and now i'm going to click the green flag so here we go one two three four five damn it. It didn't work sorry of maybe forever so your approach would work but it's very much a hack if you will like i would have to time it perfectly so that the mouse pointer is touching it or conversely i have to drag it there and just leave it there for five seconds and that's a little weird because you don't just touch a cat and then five seconds later it meows at you presumably we want it to be more interactive so i like this idea of a loop why don't we just tell the cat like. To forever listen for the cursor as by using not repeat but forever let me move this in here so now the cats going to be told when the green flag is clicked just forever if touching if touching if touching of meow when actually touched so now if i zoom out and hit play nothings happening i don't have to wait any number of seconds but when i do touch the cat meow fan section here thank you so now it's actually working quite well. Well so there we have sort of a logical bug but it does make sense if you think about what it was you told the computer to actually do well let's make things even more interesting by using one of these extensions in this bottom left corner this is how i got to text to speech earlier let me go to video sensing over here too and i can actually there we go literally the video has come on let me go ahead and do this get rid of this code and let me step out of the frame when video motion is greater than well this is cs50 so let's just type in cs50. And 50 which is just a measure of motion let me go and play sound meow of and let me stop and restart all right so there's the cat of it worked it's a little insensitive there we go actually you know what maybe it's just let me put let's see. 20 of my gosh of that's a great there we go all right there we go so now it's a little more sensitive to the padding by using the camera now this is kind of a weird example and if i just start moving around crazily it's just going to meow incessantly which is what was happening stop of when in doubt this is when you reload the page all right so now we're back to where we wanted to be but where can we now use these kinds of building blocks we were doing such tiny little programs. But even that we could turn into a whole game i bet could we get one volunteer to come on up one volunteer everyone is looking down of on the end here come on down yeah all right round of applause for our one brave volunteer here all right these super mario cookies are on the line for you depending on how this goes so i'm going to have you come over here and in advance on scratches website we have some are made games one of them written by the game. By one of your predecessors a former student that they implemented this sort of whack a mole game so what you're about to see is the camera turn on on you and you're going to see four moles above below left and right and using only your head up down left right the goal is to whack a mole to get a point every time your head touches one of these sprites so you're about to see things get very interesting very quickly but using these building blocks just those simple blocks but have four sprites not four cats. But for moles in this case we can actually turn these into actual games so here we go beginner of and you just need to center your head first. Nice 10 seconds nice 2 seconds all right a round of applause thank you do you want to introduce yourself hi everybody my name is vanilla i'm a first year and i'm going to be majoring in computer science and economics nice to meet you here we go thank you. So we won't look at the code for that actual game it was written by one of your predecessors and you can see it online if curious but you can think about now with our functions conditionals boolean expressions loops how you could kind of compose that kind of program so odds are there was a loop that was just constantly listening for that kind of connectivity or it was one of those extensions that was waiting for motion to go touch one of those sprites notice that there's these numbers up here and we haven't talked about this yet but just like in match where you can have variables a and a and a. In programming you can create variables using other puzzle pieces in scratch that just keep track of how many seconds are left that keeps track of how many times her head hit one of the moles and so you can implement the mechanics of games using very simple building blocks but how do you go about building something that's more interesting and interactive like that let me go ahead and bring up for instance one of the very first things i wrote years ago when i was in graduate school and scratch had just come out i was taking a class at mites media lab and they invited us to beta test. The software before it then became part of the world and the game i made was this one here let me find the right version of oscar time so oscar time is a game that took me tens of hours probably in the end it was a little bit addictive but let me go ahead and full screen it and i won't play the whole game but it looked a little something like this where trash is falling from the sky and i can click on it and drag it. And notice as i get close the lid opens up like this and if i let it keep falling it goes in and oscar gives me a point and i can do this again all right here comes something else so now there's two pieces of trash and it just keeps going and going and going and if you can lower the volume for just a moment we'll let more trash fall but to your comment earlier about one sprite or more sprites that's what we're seeing here. Even though our examples thus far are just one cat one or two puzzle pieces or a few puzzle pieces here is i claim a sprite here is another sprite here is another sprite and by toggling among them in that bottom right hand corner i can just associate different puzzle pieces with each of these sprites now i didn't start off by implementing this whole game and in just a moment if we can raise the volume a little bit we'll see even more trash is falling so this is why i hate this song now i got 10 plus hours listening to this song on loop just to get the timing right but it brings to life all over the place. Of these different sprites and if you play it again and again it's always a little bit different because i'm using some randomness so this newspaper doesn't always fall from there sometimes it's here sometimes it's here and so here again we have mechanics of a game where things are being perturbed a little randomized a little bit to keep things more interesting and let me go ahead there we go how about we raise a little volume one more piece of trash so a clock it just goes on forever this kind of game but let's go ahead and consider let me close that. Let me go ahead and consider how i went about implementing that from the get go so i will stipulate let me open a few of these versions here that the very first thing i did was pretty much just implement the stage i was kind of procrastinating so i poked around i found the sesame street lamppost and i dragged it into the world and done version one is done it didn't do anything but at least i had the world laid out that is to say i took a baby step toward my goal then i started thinking about all right how do i bring the trash to life even if it doesn't. And so i created another sprite by clicking the appropriate button in that bottom right hand corner and i thought about well what do i want this trash to do i want it to just kind of fall from the sky and so what i did here was the following if i go to this trash piece here or actually sorry out of order what i actually did first was i didn't even have the trash fall if i play this game the trash just stays there in the air but i can do this i can drag it and as before as i touch it i can see it. The other sprite i get the trashcan lid to go up so how do i do that well let me click on oscar down there my first sprite and here are the puzzle pieces via which i implemented this idea i changed oscars costume his appearance to be just number one which was one of the images i imported into the program and then i forever did this if oscar is touching the mouse pointer then change oscars costume to number two otherwise change it back to one so it's super simple animation i'm just toggling between lids. Up lid down lid up lid down but it kind of feels interactive and if i wanted to really make this pretty i could have like 30 different costumes where the lid is ever so slightly higher then it would look even more like a movie or fluid motion but this was enough to get the job done which is to say i didn't try to implement all of oscar time together i just took a second baby step toward my goal and then my next version of oscar time might have looked a little something like this where now the trash there's more going on here let's look at two of them. Of these blocks of code the first thing i did was i enabled drag mode to drag able and i had to google to figure this out because otherwise it didn't let me drag the trash while playing the game but once i figured that out i tell the trash to go to a random a coordinate between 0 and 240 from left to right and then they location 180 because i always want the trash falling from the sky and then what do i do i told the trash to forever change its a coordinate its vertical coordinate by negative 1 negative 1 negative 1. Like one pixel at a time which creates the illusion of it falling from the sky but i needed to do one other thing and let me scroll up each of your sprites can have multiple programs multiple scripts so to speak that are not attached to one another they will happen in parallel for you the second one is saying this forever if the trash is touching oscar what should it do go to a completely different a and a location at the very top why well as soon as i drag the trash over. Over the oscar i want it to disappear as though it's going into the can and i then want it to reappear at the top so more trash falls so i just thought about what would it mean for the trash to go into the trash can well who cares what really matters to the human user is that it just disappears and teleport elsewhere and so that's the idea i implemented here so if you can reduce intuitive ideas to just basic building blocks like this you can start to make things much more interactive and lastly if i look at this version here. And you'll see that we've combined these and so indeed if i actually go ahead and play this now not only is it falling i can let it fall right on top of oscar and watch it disappear but notice oscar doesn't pop out yet because that was the fourth version and then the fifth version and then i added the annoying music and so forth but sort of composed this program step by step by step so as to accomplish my larger goal and this is going to be true of all of the code you write be it in scratch or a or python or the like trying to combine. Up with or they're trying to reduce your ideas your grand vision to just baby steps building blocks so that you start with version 1 and maybe you submit version 10 or 20 but you don't try to implement version 10 or 20 at the get go you take those incremental steps all right how about one other well let me propose this let me go ahead and open three games that represent one that your predecessors also implemented which looks a little something like this in version 0. I wanted to implement a game that simply has these kinds of mechanics i'm touching my arrow keys on my keyboard up down left and right and i'm moving the harvard logo let me zoom in a bit so if i hit the up arrow the harvard shield goes up if i hit the down arrow the shield goes down if i go all the way to the left it goes left until it hits the wall and same thing on the right so this is like the beginnings of a game or a beginning of a maze something like that well how might i implement this well let me look inside this one and there's a lot going on but again i sort of took this. Simple steps notice that i've got three sprites a left wall which is just a straight line the right wall which is a straight line and just intuitively why did i implement those as sprites why do they need to exist as entities themselves yeah in front yeah i wanted to interact with the shield so i need to be able to ask that boolean expression like not touching mouse pointer but touching shield for instance a different type of yes no question and so what is the code for the shield actually doing well there's a lot of do and do. And let me focus on the abstraction first notice that i've got this one green flag clicked i want the shield to go dead center 0 comma 0 and then forever listen for the humans keyboard and feel for the wall so i decided to implement my own pink puzzle pieces that implemented two separate ideas one just listen for the keyboard up down left right and then do something and then feel for walls is this idea of whatever i go up down left or right if i touch a wall i need to stop doing whatever the keystrokes are telling me to do. To do so now if we dive into those implementation details listen and feel our abstractions custom puzzle pieces let's look at the implementation details well here's the keyboard if the key arrow up is pressed change a by 1 if key down arrow is pressed change a by negative 1 and you can probably see where this is going right arrow is a by 1 left arrow is a by negative 1 and that's sort of all that's involved with up down left right but wait a minute. Why is there no loop in this listen for keyboard puzzle piece i needed a loop last time so it constantly works exactly i put the loop in my main part of my program up top so something is telling me to keep listening again and again so it's got to be somewhere but it doesn't have to be in the actual implementation and lastly how about this feel for walls well if touching left wall which is just another sprite change a by 1 so that is to say if i'm touching. I want to kind of bounce it back the other direction and same thing on the right wall if i'm touching the right wall i want to bounce it back to the left which effectively means that even if the humans hitting the key it's like fighting with this code but it's never going to go through the wall based on that match it's going to stop it right there all right let's add something else to the mix suppose i want the game to change to be a little something like this where yale is some kind of block in between me and like the exit so some dramatic race here of i just got by but the yale logo doesn't seem to be there. To be doing all that much except bouncing so i'm guessing there's a loop maybe a conditional like checking for those walls too so let's go ahead and zoom out see inside let's not worry about harvard because it's pretty much the same let's look at the yale puzzle pieces and sure enough go to the middle 0 comma 0 point in direction 90 so point horizontally on the grid and then if touching left wall or touching right wall i'm kind of cheating this time but cleverly just spin around and do 180 so you effectively bounce off the wall. This just tightened up my code i don't need to do the negative one or the plus one i just say bounce in this form of code otherwise just constantly move one step now if this is a game where yale is supposed to be better and faster well let's change the one to five move five pixels at a time let's move it 10 back and forth let's maybe 100 us of so what just happened that is a bug which we can avoid by just not doing that but why did it break out of the wall yeah. Exactly because i'm doing 100 steps at a time i'm never actually touching the other sprite because i'm sort of stepping way over it so there's never a moment where they're actually touching so previously i was just getting lucky by doing fewer steps because it's gradually going over the wall which gives me just enough time to detect as much so i would have to kind of tinker and handle this a little bit differently so it's a bug if it's too fast but at least if i keep it slow and reasonable the match actually does work out so long as it starts again in the middle. Well let's do one final flourish here whereby let's bring it into the mix they're super smart so maybe they can kind of track us and follow wherever i'm going so how might this work all right so nothing happens yet because we haven't finished composing the game and notice here of now it is struggling it's kind of twitching there because it's going just above then below and then above and below so we could fix that too if we want but that's just a function of my match one pixel at a time let me open up this one. See inside and click on it and you know it doesn't take much to implement it it seems so go to random position forever point towards the harvard logo outline aka the shield and then move one step so if i wanted to make it even smarter even faster what do i change here yeah change one step to like two steps to double their speed or five steps 10 steps or 100 steps and the games going to be over like that but that's all it takes to now make these kinds. Kinds of elements so if you are a game player on your phone or consoles or computer or whatever if you think about almost any game you can probably now start to think about how they implemented those mechanics because it's just being reduced to functions conditionals loops variables and the like in this case so let's go ahead here and have maybe one final volunteer we've got one more bag of ores here of that was super fast you want to come on up all right great volunteer come on up. All right let me find the full fledged version of this that one of your predecessors made and let me get the right one of here we go we'll see some instructions on the screen in just a moment and when we hit play you'll see that the mechanics are all combined now into one full fledged game but first an introduction it's on. And i'm from nepal all right welcome to the stage all right so here we go yep go ahead and click the green flag you can't touch this you see the grid is just bigger this time you can't touch this nice now there's that yale element my my my my music here so hard makes me sing of my lord thank you. Third yale all started at slightly different positions nice all right there's it gotta go fast. Nice no more walls with two its princeton now. Second to last level. A couple more tries yes. One more try all right a round of applause nonetheless thank you dan thank you so as you might have noticed if your eyes started to wander to the light bulbs here there's actually 64 of these light bulbs and i'm wondering if you divide 64 by 8 that's eight bytes of light bulbs and we now have some unicode and our vocabulary so it might very well be the case that we've been spelling something out. Out on the stage here for you all of this time but before we adjourn for cake to be served in the tran strep allow me to introduce some of cs50's human friends the harvard crocodiles and the radcliffe pitches to give us this exciting ending this is cs50. There's a certain someone who i'm indebted to and since you'll be in cs50 i have this friend for you. 2 3 4. And still your debugging abilities stun me when i'm at the end of my rope you just snap and my codes up and running rubber ducky you're so fine and i'm lucky that you're mine rubber ducky you're my very best friend it's true you're my best friend it's true rubber ducky i'm awfully fond of you. Good afternoon cs50 we are the harvard crocodiles harvard oldest capella group founded way back in 1946 at the historic casey pudding club we'd love to make a big thank you to cs50 staff and to david alan for having us perform here at sanders theatre and if you'll enjoy this performance please come audition for us this weekend at far as hall. Hello everyone we are some of the radcliffe pitches and we are also hosting auditions this weekend you can find more information at our inst gram at radcliffe pitches now let me tell you a little bit about just about a year ago today when i was sitting in your very seats on my first day of cs50 lecture and this is just about how i was feeling. It's the first day of class and i'm brand new to code is this for me so many people around can i get through the workload but it's my dream i tend to stick to english not science but my five friends told me to try this. Robot dog you kind of look like you have your life together i guess i really need some advice. Please take this class at set on set this is cs50 baseball thank you to the cross thank you to the pitches cake is now served cut them up to say hi if you'd like or meet spot see you next time. You