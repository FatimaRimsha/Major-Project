As you start working with functions another thing is going to become really important to understand which is the concept of variable scope so scope is a characteristic of a variable that defines from which functions that variable can be accessed there are two primary scopes in a local variables and global variables now local variables can only be accessed within the functions in which they're created they can't be accessed within the functions in which they're created. By every other function that exists in your program only the function in which it was created global variables on the other hand can be accessed by any function in the program and the reason for that is because they're not created inside of any particular function we declare them outside of all of the functions which means that every function knows where it is and can access and manipulate it so far in the course you've pretty much been working exclusively with local variables here's an example of a very very simple main function and a very simple additional function that we've written. In this case a which i've coloured green just to highlight the locality or the scope of that variable is local to the function triple main cannot refer to a at all it doesn't know what it is no other function in fact if we had additional functions in here could refer to a similarly results which i've coloured blue is local only to main only main knows what the variable result is triple cannot use it. Now as i mentioned global variables do exist if you declare that variable outside of any function all of the functions in the program can refer to it so in this case i've highlighted in green a global variable declaration in this case the variable being declared is called global to be extremely clear about it it is a type float and i assign it the value 0 5050 you'll notice that in main and in triple i am able to refer to global and in fact if i go through those. The program as indicated main first calls triple triple multiplies global by 3 which has its value to 1 5 something 1 51 or something like that and then main also prints out the value of global so main will not print out 0 5050 it will print out global times 3 1 51 so you've got to be careful when you're working with global variables while they're very flexible in being able to pass. Information around so that every function can use it it also can have some dangerous consequences if one function changes the value of a variable before you expect it to be changed why does this distinction matter why do we care whether some variables are local and others are global well for the most part local variables in care what's called passed by value when we make a function call what does that mean well when a variable is passed by value the call. Which is another way of saying the function that is receiving the variable that gets passed in as an input it actually doesn't receive that variable itself it receives its own copy of it to work with this is a really important distinction we just saw a second ago that with global variables if we manipulate the global variable in one function the effect in that one function carries through to every other function but with local variables that's not true each function when it receives. Receives variables as input receive copies of those variables not the variables themselves so what is the side effect of that that means that the variable in the caller the function that is making the function call is unchanged unless you overwrite it for example in this code foo is not changed at all int foo equals 4 call triple of foo inside of triple we would expect that foo would be multiplied by 3 and returned but there's actually no. Effect here though a very subtle difference this does have the effect we want do you see why we're overwriting foo in main this time so int foo equals 4 foo equals triple foo when we make that call triple gets its own copy of foo its own copy of 4 it says return 4 times 3 or whatever variable gets passed in times 3 and then we assign the return value. Of triple to foo again so this actually would overwrite foo this is the only way to do this with local variables so now if we add another line of code here at the end of main to print out the value of foo it would in fact print out 12 variable scope is generally not too much of a problem if you name all of your variables different things but it can get kind of nasty if the same variable name appears in multiple functions which will happen a lot if you ever do. Work in the real world where you are working on collaborative programs and people in different teams are working together to write the same program or the same set of programs they'll frequently reuse variable names particularly common ones like by i a and so on but when variables have the same name scope issues can get a little trickier to parse for example do you know what would be printed out at the end of this particular program. Take a minute pause the video and read through this program you can see at the top we have a function declaration for a function called increment that function takes a single parameter an integer which we call a and it outputs an integer that's the return type at the beginning then we have main a couple of lines of code in main the last of which is a print statement and remember that's the question here what is actually going to be printed at the end of this function and then we actually have the definition of increment below so take a minute step through the code. Code trace things out do you know what will be printed at the end of this particular program all right hopefully you've taken a few seconds to try and parse this one out let's do it together so i've crossed out increment declaration at the top there it was kind of a distraction it's not its own variable it doesn't have its own scope it's just a function declaration so for purposes of trying to parse out what's happening in this program we might as well just avoid it now we have in this case the reason this problem is tricky is because. We have local variables in both main and increment each of which is called a and of course the crux of this issue is trying to suss out which a gets changed and how does it get changed so i've coloured every instance of a that's local to main red and i've coloured every instance of a that's local to increment blue notice in that third line of main a equals increment a that increment is not being passed mains a or the red a. It's getting past a copy of it and it's only going to work with that copy of it the blue a if you're mathematically inclined you might have instead thought of this as a sub a for main and a sub i for increment but it's the same idea a sub a or the red xes in the previous slide are the variables that are local is the instance of a rather that is local to main and a sub i or the blue variables on the previous slide are the instances of a that are local to increment. So were you able to figure out what this function printed at the end i'm doug lloyd and this is cs50