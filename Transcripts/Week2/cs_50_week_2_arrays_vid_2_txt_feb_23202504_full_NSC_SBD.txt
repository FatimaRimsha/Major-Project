Of well hello one and all and welcome to cs50's week two section this week we learned about arrays that is how to store data inside of a computer using our very first data structure if you go this way of kind of storing data back to back in a computers memory so the goal of these sections here is to help you kind of bridge the gap between lecture and this weeks problem set so we'll go through a few of the lecture topics have you all asked the questions you want to ask and get. Get some practice that might help you as you go off and work on the problem set individually on your own so to begin my name is carter zeke i'm one of the courses preceptors here on campus if you want to get in touch with me feel free to email me at this email right here carter at cs50 harvard eds but a brief overview of today today we'll look a bit like this we'll begin focusing on this idea of compilation like how do we take the code that we write in a for instance that source code we write in a 5. And how do we convert that to the zeros and ones that a computer actually understands and can run we'll then focus on this idea of arrays how do we store data more efficiently than we've seen before and then we'll focus in particular on this idea of a string like how do we store characters that then themselves form entire words or sentences inside of our computers and finally towards the end we'll focus on this idea of command line arguments so you've already been using programs that use. Command line arguments in act already but now you get to see exactly what they are and how you could write programs that actually use them yourself so let's dive right into compilation then so in lecture we learned that compilation was this way of taking the source code we write like let's say some code in a and converting it into the actual binary a computer understands and our computer as much as i'd like to think so it doesn't understand a as a language itself. Extra step that we have to follow called compilation that takes that source code and converts it to the binary that our computer actually understands at the end of the day so here is for example some piece of source code in a and i'm curious for those of you who are here can you spot the bug in this source code this is some a code here if i were to run make to compile this code i might get some error and i'm curious if you can spot what that error might be. So i'm seeing a few people saying that we're missing the of in print there is no function in a called just print at least in the standard library so we have to say this is print and the point here is that when you're using source code these kinds of bugs are more obvious to catch if you're writing source code it's kind of obvious at least more so in other cases what bugs you might have but now let's consider like we learned from lecture that the next step in compilation is taking this. Source code and converting it into this middle language called assembly code and this is an example of assembly code here and i'm curious for those of you in this room can you spot the bug in this program or could you tell me if there is a bug in this program at all feel free to take a look at this code even if you're not familiar with assembly i'm seeing some shaking heads here so the point here is that if you get this lower level. Language going beyond a which is our source code moving to assembly code it gets a little harder to spot the kinds of bugs that arise in our programs and now let's take it one step further let's go from assembly code down to the binary itself and i'll ask you the same question could you spot the bug in this code if you're free to chime in if you think you have it i'm hearing some folks say not a chance you can't find the bug in this code that's kind of to be expected right. Nobody among us is going to be an expert in binary they can kind of parse through each individual 0 and 1 and find the bug in this code so there's this idea of trust in computer science that when you run this program called make at least in cs50 or other programs like compile other source code you're kind of trusting that's going to take your source code as you have it and compile it exactly as is down in to binary. Binary. Things perhaps from source code to machine code you have to kind of trust yourself we trust where they are in these cases to help us make the programs we want to make at the end of the day so we'll focus not so much on technical parts of compiling here but more so on the actual ethical aspects of it too so questions then on compilation this idea of converting source code to machine code any questions so far. All right so the key thing to take away here is just that when you are in cs50 and you're working on compiling your code you'll use this program called make that converts your source code in a down to machine code as you go off and learn more computer science you'll see just how up in the air these things can be and how much you have to actually trust the programs you're using along the way all right and a question here what we'll be using in the real world to compile our a code. Like in cs50 you'll likely use a program called make and there are various options that make can have in this case in cs50 we've kind of specified those for you as you go off in the world of computer science and you try to expand your horizons you might yourself set the options for make to more clearly specify what you want the end result to be when you convert that source code to machine code all right so let's keep going here and our next topic from this weeks lecture. Idea of arrays that is a way of storing data in a computers memory so in this weeks problem set you'll also get to see a bit of a game that's popular i believe kind of around the world one called scrabble and if you're not familiar in scrabble you get these individual letter pieces like ones for a or ones for a or ones for a for instance and each of those letters has on it a certain point value. So let's see like a letter a that little square that has a on it that has four points that has been awarded a that little square that has a on it that has two points associated with it and as you play this game the goal is to take these letters and convert them into entire words so if you had for instance something looked a bit like this you had these five letters what word could you make from these five letters. You could probably make hello so you could take all these five letters convert them into this word hello and in scrabble you'll play a word that looks a bit like this so notice here that his worth four points a is worth one point a is worth one point and of is worth one point and if you add all these points up four plus one plus one plus one plus one well you get a total of eight points for playing this word. A kind of a correspondence conceptually between this idea of scrabble and this idea of arrays so in the same way that we're taking individual pieces of data or individual squares of letters and convert them into one long word or one long space the computers memory we're doing the same thing with arrays we're taking these individual pieces of data and lining them up back to back to back in a computers memory to store that data even better as we go. And work on our programs so let's think ahead and in csc you actually get to make your very own final project and here is for example one students final project in csc they wrote a website that allows you to keep track of your hours of sleep each night so maybe you yourself can make something similar despite the end of the course but they allowed you to go to their website type in the number of hours you slept that previous night and they would store it for you and keep track of that day after day after day so you could look back and see how. Many hours you've slept over time now if we only had things like variables and not arrays we might be forced something a bit like this we might have to store this data in individual pieces kind of around our computers memory and we might even give them individual names something like well on night one we slept seven hours on night two we slept eight hours on night three we slept six hours. And now i'm going to ask you this question here why might this not be very well designed if we had to create one variable for every single night of sleep why might that program not be very well designed and what could we do better perhaps any ideas if we wanted to add more nights it might not work in this case i would say if we're using one variable for every night. I mean i think you're right so if we wanted to later on edit our program we generally specify all the variables that are part of that program at the beginning so if i wanted to add more i couldn't quite do that we'd have to kind of find them all over again if we wanted to add them up that's a nice idea so we'd have to kind of think back and be like of was this did i use the variable night one for this or night two or night three which one belongs to this particular number. Say that this isn't the best way to store our data using all these individual variables because it can get very hard to keep track of and so arrays here actually help us solve this problem they let us take our individual pieces of data and put them all in a metaphorical actually kind of physical line inside of our computer back to back to back in our computers memory so for instance here's what it might look like to have each of these hours inside of an array. Put them back to back to back in our computers memory and we would then give this entire collection a single name like let's say nights and so now we could see well on this first night looks like we slept about seven hours on that next night the next integer here we slept eight hours and then six and then seven and then eight again for a total of five nights of data now if we wanted to access not just this entire. List of values but some in particular well we have some special syntax we can use that a gives us we could say something like this knights bracket 0 and that will return to us that will give us that very first value in our array so in this case 7 and you might be asking here why not knights bracket 1 well in computer science it's kind of a convention that we start counting from 0 as you. Saw when we wrote our very own four loops we began them by saying often that i equals 0 or a equals 0 we start counting from 0 and in this case i would argue actually kind of make sense like knights bracket 0 0 means start at the beginning of this array called knights and don't move any further move 0 places if we're looking at the beginning of our array called knights and we move 0 places well we get back this number called 7. But what if we did this we did knights bracket one well we begin we'd look at the first place in our knights array and we'd say let's move one step over of now we found that second value in this case it was eight and in the same way we could say knights bracket two well let's begin at the very beginning and let's find seven here but then we're moving two spaces over so we go eight and then six and now we have that very third value in our array so key idea here we start counting. So we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do this with a array and we're going to do. We've indexed each of the elements so the very first one is assigned the 0 index the next one the 1 index next one the 2 index and so on so we could use knights bracket any of these numbers on the bottom to get whatever number we're looking for now questions here on arrays this indexing process here what questions do we have. Of seeing none for now but feel free to keep chiming in if you'd like now one common question we get is how can we then actually create an array we've seen kind of the structure of an array visually what they look like but how do we actually create a structure for one and for that we actually need to keep in mind three different aspects of an array if we want to create an array a needs to know three things. So for instance one of the things you need to know is what is the name of the array what should we call this collection of data in our computers memory the next thing it needs to know is what is the size of this array how many elements are we storing in this case our size is 5 it also needs to know though what kind of data we're storing or what type of data is inside this array so we also tell it what type it will store and in a our data is stored. Arrays only store a single type of data so in this case what type might we be storing seems like we were storing integers so to combine this these three ideas of the name the type and the size of the array we put all this together in a syntax it looks a bit like this int nights bracket five and so to break this down we first say the type of whatever we're storing in the array in this case an integer. Then we say the name of the array knights like that and then in brackets we put the maximum size of that array how many elements are going to be inside of it in this case we had five and note that this counting is not zero indexed if i said int knights bracket zero here i would be saying i have an array of zero elements which doesn't make sense if i'm going to have an array i need to have at least one element in it so make sure that you keep in mind this is not zero indexed even though later on. And we actually try to access values in your array that will be zero indexed at the end now if we wanted to add items to this array off the bat let's say we wanted to create the array declare it like we did here tell a what type it is what its name is how many elements it had and also initialize it with some values we could do it with this syntax right here using braces and then followed by the values we're going to input into that array in space. Out by commas here so 7 comma 8 comma 6 comma 7 comma 8 now one question i see coming up is can we change the size of an array so notice here we declared that this array had a size of 5 and in a you cannot change the size of an array if i say it's 5 at the beginning it has to be exactly 5 we'll see ways later on in the course that you can actually try to allocate more memory and change the size. Size of an array but a lot of it just involves copying what you currently have in one space of memory into a new space overall more on that in week four but for now you can say that there's really no way to change the size of an array so if you think you might need a lot of values you might need to make a lot of spaces to have those values in your array let's do other questions we have here so let me find a few. Just on multiple planes like a 3d array for instance so you could think this is getting a little advanced here of an array that actually contains arrays inside of itself and that is a perfectly valid thing to do in a you could have an array where each element of that array is an array in itself and that way you have kind of like a 2d array a bit like a grid and then if you think even further well you could have an array where each element is itself an array and each of those elements. Then have arrays as their elements too and that gets you this 3d kind of structure no need to worry if that made no sense to you but generally you can put take arrays and put other arrays inside of them at whatever level you'd like to do that at other questions here too let's see a question here about negative 1 indexes so if you've programmed in python you. You may have seen this kind of similar syntax of writing the name of some list and then typing bracket negative some value like negative 1 for instance i believe in a that this is not possible so that's a feature of python which gives you i believe the last element in your list but in a there's no such thing as a negative 1 index indexes must be positive a question here let's say we have this array of 5. Elements here could we add maybe only three and later on add the other two you certainly could so if you were to go back to this model of declaring your array you could specify values for the first three in this array and later on add the other two now you have to be careful though because if you don't specify what those values should be those final two values they could probably be literally anything. You don't want to touch them unless you're sure you've already set them from the beginning now if you follow this kind of syntax here you have to specify every single element of your array you can't leave any out all right so i think that covers most of our questions here about arrays so let's keep going let's actually get some practice using arrays here so we have a brief exercise in which you're going to write a program that takes an array of integers. Actually builds an array of integers and we want it to be the case that each integer is 2 times the value of the previous integer so for instance you could think of a list like 1 and then 2 and what's 2 times 2 well 4 and then what's 2 times 4 well 8 and then 2 times 8 is 16 so the entire list is 1 2 4 8 16 and we want to in this program print. The entire array integer by integer so let's try this out i'll go over to my code space here and i'll write up this program i'll call it let's say just double dot a meaning i'm going to double each element of this array and now i can see here that i have a file called double dot a and now what's the first thing i should do if i'm writing a new program in a any ideas what should i usually do i might want to include the header. So i'll say i want to include the cs50 header file which gives me access to things like strings and so on and i also want to include standard of a which will allow me to print things out to the screen notice that the standard of library or to library contains functions like print so i'll include that here and i'll write the beginning of my program int main void and follow it up with what what i probably first want to declare is. This array that is to tell a exactly the important features of it like what type will it be storing what name will it have what size will it be and so on this very first line i'll do that we're probably going to be storing what type of data here we want to be doubling numbers and whole numbers in particular so we're going to be storing integers i'll say int here now what should the name of this array be it could be generally anything but i think for me i'll just call it something like int. Sequence that is some sequence of values that will double every time and then how many elements should we store i might just say let's go ahead and store five off of that we could change this later if we want to so here i have an array called sequence that stores five values and what type are those values well they're integers here so if we go back to our problem statement we saw that the first element of this array is 1. And now my question for you how do i access the first element of this array using the syntax we saw earlier what could i write to find the first element of sequence i could probably try something like this i could write the name of sequence and then bracket 0 so bracket 0 means start at the beginning of sequence and move 0 steps find that very first element in this array. And if i want to assign it some value well i could do that here in a i could say sequence bracket 0 equals some value in this case i'll say it equals 1 so now i've set the very first value of sequence and why don't i print that while i'm here i'll say print of percent i for that integer format code backslash a and now i'll say sequence bracket 0 so to be clear here what i'm doing is. Holding a placeholder for an integer i'm going to put inside that placeholder the value of sequence bracket 0 which according to line 8 we just set to be 1 so now here comes the trickier part how do i try to go through this array and update each of its values over time well i set the very first one but now i want to more dynamically set the rest of them i don't want to do this i don't want to say sequence bracket 1 equals 2. Sequence bracket 2 equals 4 that's getting a little in the weeds i want to automate this process for me what kind of structure that we've already seen can we use i've seen this idea of maybe some kind of loop and we learned that in our last section that a for loop is good when we know how many times you want to loop overall so here we saw our sequence had a total of five values. We already set the first one so i think we want to loop a total of four times to set the second value the third value the fourth value and the fifth value so i could write a for loop like that i could say for int i equals and now here's a question what should i be equal to well i in this case let's say it refers to the index of the array we're trying to set so what's the very first index you want to set. We already did 0 but now we should do 1 so int i equals 1 now how long do we want to iterate for well at least until we get to i is still less than 5 so i'll say i less than 5 and then i plus plus so now we have i going from 1 to 2 to 3 to 4 and i will update our next four values it will not go to 5 because again there's no in this array there is no sequence back at 5. That would be going beyond the bounds of our array even though there are five elements again we index from 0 we can't move five spaces total we can't move forward five spaces from the beginning of our array of so now we have this and the question becomes how would i set this value of sequence well i know i want to set sequence bracket i in the first iteration this will be sequence 1 in the next iteration it will be sequence 1. To. Currently at i equals 1 i'll be saying sequence bracket i sequence 1 equals sequence bracket i minus 1 or 0 sequence bracket 0 so the previous value here now if i want to multiply that by 2 i could do the very same thing i've done before in a i could say star 2 which means multiply this particular value by 2 so again if i is 1 here i'll say sequence bracket 1 equals. And then i will go ahead here and i'll say print backslash a actually i don't think i need backslash a here i already have it up there so i'll leave things as is and this is our entire program. So let's see if we can run it i'll go back to my terminal and i'll say make double make double to compile it i see no errors i'll now try this i'll say dot slash double and i seem to be getting somewhere i have 1 2 4 8 and 16 so i'll go back to my code here let me ask what questions do we have on creating an array cycling through its values. With a for loop setting them as we go for those of you who are feeling a little more comfortable there's another way to do this too that doesn't involve separately setting sequence bracket zero you could simply declare your array and have a single for loop that sets things for you i'll leave that piece up to you though to do on your own. Now a question i see here about this programs design wouldn't it be better better designed to have a variable that says what the size of this array is for instance let's say i'll set int size equals 5 like this and now maybe i'll replace this with size and replace this with size and now i could change this it seems in one place i could make this 10. I can make it 7 or 6 or so on so i'll leave it at 5 for now and let's see if that actually works here so i'll say go back to my terminal and i will do this i'll type make double and i'll run it again dot slash double and that seems to work so i'll go back to my program maybe i now want let's go with eight numbers overall go back to my terminal and now i'll say make double again. And i seem to have allowed myself to pretty quickly change the size of this array and print out a longer sequence as i go just now by changing one particular value and this is actually a common let's say pattern you'll see in writing well designed programs it's not really a good practice to specify what we call a magic number it is a number in here that we're not quite sure what it is what it refers to. Might repeat throughout our program if you have a number like that best to create a variable and change it in one place so you don't have to go through later and update all the places we had for instance 5 now another question i see here is could we use get int well let's say and we know in the safety library we have this function called get int let's the user type in what value they want to give i'll try that i'll say size is get int and i'll say enter a size like this. And now i'll go back to my terminal and i'll say make double and i'll run dot slash double now i'll say let's go back to maybe let's go back to six that seems to be right one two three four five six now i'll type make double and then dot slash double again and now i'll type nine and i'll see i have an even longer list so it seems like we could even take user input and then decide the size of our array after that. All right other questions here on this program all right so let's keep moving on and let's focus now on this idea of string so we've seen this idea of arrays which is this structure we have to store data back to back to back in a computers memory. That strings are actually not all that dissimilar from arrays in fact strings themselves are a special kind of array so consider here again our scrabble example we had these individual pieces of letters like he all and of and they all formed together this word hello and we put them all together back to back well in the same way do strings actually work. A individual letters like these and we can then do something a bit like this we can put them all together and make an entire what we might call in this case a phrase so strings are nothing more than arrays where the elements are characters so here we're now seeing that we have this array called phrase with the letters he all and of and we can use the very same syntax that we saw earlier i could say phrase. Bracket zero which gives me the very first element of phrase i could use phrase bracket one which gives me the a here and then phrase bracket two which gives me the a so i'm able to do the very same things i could do with a raise but now with strings one fancy feature though that you should pay attention to particularly for this weeks problem set is that we represent characters in a underneath the hood using integers or numbers. From an earlier lecture we learned about this idea of as ii or the american standard code for information interchange and we saw a mapping a bit like this where a maps to this integer 65 a maps to this integer 66 a maps to this integer 67 and so when we see these numbers 65 66 67 and they're the type of character we then actually convert. That to a character we printed out as a character overall so consider then that this phrase that we see here hello well it could also be a set of numbers 72 69 76 76 and 79 these are the as ii codes that correspond to those letters we saw a little earlier so with that in mind let's think about writing a new program one that actually tells us if a string. Has characters that are in alphabetical order or not now we can assume here that all the characters are uppercase so let's begin i'll go back to my code space and i'll now create a new program i'll call this one alphabetical a and i'll do the very same things i did with double a i'll make sure to include cs50 a i'll make sure to include standard i of as well. I'll also say int main void and now i can write the rest of my program so maybe the first thing i want to do is get a string from the user so i could say string phrase equals get string enter a phrase so i'm using the cs50 libraries get string function and now i'm able to ask the user for some phrase but now i want to ask that question. Is this phrase in alphabetical order or is it not and it seems to me like the very first step there would be to go through every individual character in our string we have to have a way of looking at every character to test is every character in alphabetical order or is it not so what can we do to loop through this string or really this array of characters. Idea of a for loop again so we used it for our array of numbers and there's no reason that same approach can't work now when working with a string because again a string is just an array but an array of characters so i'll say this for int i equals 0 we'll begin at the very first character in our phrase i is less than hmm what should i be less than i mean i don't know quite how long this string is if i typed in a string. Hello would be five characters i typed in goodbye it would be longer what could i do to find the length of this phrase so i'm seeing a few folks who are catching on to this which is that in lecture i believe we saw this function called stolen st re in and stolen actually can tell us the length of a string if we call it and give it our string as input. Stolen lives in this library called string a or string in general and the header file is string a now if i want to test how long this string is i could say int length equals stolen and then pass in my string in this case the one called phrase so now i have this variable called length that i could use in my for loop i is less than length i plus plus so whatever the length is. Is i'll make sure to first calculate that and then will i test every individual character in my string making sure not to go past the length of that string now a few other ways to do this too i could also say int i equals zero comma length equals stolen of phrase like this and this is getting a little long i have to zoom out for this but this allows me to put everything on a single line. And it's implied here that if the very first variable i type is of type int if i type a comma the next variable will be that same type in this case an integer and i can assign it some value like the length of phrase this puts everything in one for loop what i probably wouldn't want to do is this i might want not to say i less than stirling of phrase but why might i not want to do that let me show you the full line here. Why would it be better to define length here in this initialization step than here which is my condition that's checked every loop so i'm seeing a few good answers which is that if i know i'm going to be checking this condition every single loop well why do i have to run stolen every single time the length of the string isn't really going to change and in fact we'll just add a new string. More time to my program as it runs probably not a whole ton of time if computers so fast these days but it still adds some time so best to put it elsewhere to calculate it once and then use that variable throughout your code so i'll say int length is the result of calling stirling with phrase and i'll do it this way keeping things separate just for line length sake at this point of so now i'm able to access every individual. Character in my phrase and to make this a reality i could say print percent a for individual character and now i'll print out let's say phrase bracket i and now i'll open up my terminal and i'll see if my code actually compiles i'll say make alphabetical csc compile i'll run dot slash alphabetical type in my phrase which is hello hit enter and i see it printed back to me. I probably need a backslash a at the end here to make sure that i'm actually returning my prompt down below the result of my program but i can fix that here i'll go back in and i'll scroll down and at the very end i'll include a backslash a like this now though i think we should take a broader look at this if i type make alphabetical and i say dot slash alphabetical hello. I know i'm able to access the a the a the a the a the of but now there's a question of how do i know if something is in alphabetical order like i can't really say there's no function i believe in cat least that i know that tells me does a come before a or does a come before a what could i pay attention to instead. Look back at this mapping here what pattern do you see so one thing i notice here is that as we go forward in the alphabet from a to a to a we notice that the integer representation is actually increasing as we go so first 65. Then 66 then 67 so maybe we could use that pattern in our own code here i can go back to it and let me change the format code from percent a to percent i that means i want to print whatever data is stored at phrase bracket i whatever index of phrase but i want to print it not as a character but as an integer i want to see what underlying number is being represented so i'll try this now. I'll recompile alphabetical then i'll say alphabetical and i'll give it hello and now i see a lot of numbers so i mean that makes sense i told it to print out now the numeric representation of the characters it's storing but let me try this again i'll make it a little clearer i'll go back to my program and i'll add a space between every character to separate these numbers apart and now i'll recompile i will say make alphabetical. Make alphabetical make alphabetical dot slash alphabetical and i'll say hello in this case and i see 104 101 108 108 and 111 now these don't seem to match if i go back here i see a for 65 a for 66 a for 67 why might they not match do you think yeah so notice how in here i've been actually typing things. Lowercase and lowercase letters have different numeric representations let me try this with capital i'll say dot slash alphabetical hello and all caps hit enter and now i see those familiar numbers 72 69 76 76 and 79 so we can assume at least in this that all of our words to check for alphabetical order will be all in capitals so let's keep going now of so i'm able to access. Each phrase or each character in this phrase but now what question should i be asking what should i ask maybe if something is not in alphabetical order or should i ask if something is in alphabetical order and how would i convert that here to an actual condition any ideas yeah so i'm seeing we could maybe compare. Letters as we loop through our phrase here so maybe we could do something a bit like this i could say if there's some condition here and maybe this condition is we'll check if characters are not alphabetical like this because we know that if the characters are not alphabetical if any two characters are not in alphabetical order well then the entire thing is in alphabetical order. So what should i check what should my condition be to determine if two characters are not in alphabetical order well i could probably look at the first one i could say phrase bracket i that gives me this very first letter but now what condition would be true if the following character is not in alphabetical order maybe i could say if this current letter is greater than. Let's say phrase i plus 1 that is the next letter so here's what we have if this current letter has a numeric representation that is greater than the previous one well that means it's not in alphabetical order and to make this more concrete let's go back to our slides let's say we had a followed by a well we'd first look at a we'd say the a integer is 66 then we look at the number of lines. Next one a that's 65 so we're seeing now that a has a greater value than a that means they're not in alphabetical order we do the same thing for a and a for a and a and so on so i think we're onto something here now what should we do in this case if these are not in alphabetical order we could probably print out something like not in alphabetical order and now logically what we do. We know that our program is done we don't even check any more letters if something is not in alphabetical order if any two characters are not in alphabetical order we can return and call it good so i'll return zero here and if you're not familiar as we saw in lecture return zero basically means end my program here don't do anything else as soon as you see this line just quit and end my program now though let's try this so i'll say i will say. Go back to my terminal i'll compile i'll say make alphabetical and i'll type in alphabetical and now i'll type in something like cuba which we know is not in alphabetical order i'll hit enter and we see not in alphabetical order so what if i did this i could say such alphabetical now i'll try acc and i get not in alphabetical order. Might be wrong here go back to my program what do we see any ideas here's the full screen code again so i did remove the correct line down here so i didn't actually. Actually tell me i haven't actually said when these things are in alphabetical order so maybe that's something to consider here there's a slightly more subtle bug though and that is let's consider what happens if we go back to our alphabetical order array here so let's say we checked a and a those seem to be in alphabetical order right. That when i was equal to 0 now when i was equal to 1 we checked a and a that seems fair of so those are in alphabetical order as well now when i was 2 we checked a and what i mean what comes after a i don't think there's really anything out there past a so i think we made a mistake here we don't want to be checking against values that are outside of our array and in fact that's a common bug. But also a very dangerous one we don't want to be looking at places in memory that we actually shouldn't be looking because one we'll get bugs and two we might touch things we're not supposed to touch in our computer so let me fix this i'll go back to our code and how should we adjust this maybe we go from i equals 0 up to length but minus 1 so we get the very end of our phrase let's go back to our example here we check a and a. And if those are in alphabetical order well we know the rest is in alphabetical order we don't need to check a and whatever else comes after it right in this case some empty value so let's go and try this again i will now go back to my terminal and i'll say make alphabetical dot slash alphabetical and i'll run hello and i see well that's not in alphabetical order now i'll do dot slash alphabetical again and i'll type a. A by hit enter and i don't see anything now there's two options here i could say if this and i know they're not alphabetical i could try else maybe print alphabetical order like this and then return 0 but i would argue that might not be wise and why do you think that wouldn't be wise. Yeah so i'm seeing that we probably only check the very first two characters so notice here we begin with i equals 0 so i equals 0 we check are the characters in alphabetical order or are they not if they're not we'll break out our program that seems fine if they are though we'll say everything is in alphabetical order and return 0 but we didn't yet check the rest of our phrase we really should be doing and then further we're. Turn zero again means exit the program at this particular moment so we're going to exit and never look at the rest of our code so this should be really elsewhere and in fact it should be probably at the end of our loop we can only say for sure that this is an alphabetical order after we've gone through every pair of letters and checked that they are let's say not not an alphabetical order or that they are in fact an alphabetical order so i'll say print these are in alphabetical order like this. So this then is our entire program and i'll run it now to test it out i'll say make alphabetical dot slash alphabetical and now i'll type in acc i see that's in alphabetical order i'll do it again with cuba and no they're not in alphabetical order so questions then on this implementation of our program. Program or on strings or arrays more generally so seeing none right now but feel free to keep chiming in if you'd like let's continue on then and focus on this new idea of command line arguments. For today is this idea of running programs and giving them input not necessarily while they run but even before they run and now you've probably seen similar kinds of programs in fact every time i went to my terminal and i typed make alphabetical until i hit enter make has not yet run but notice how i'm not just typing make the name of the program i'm giving make some input. Or some argument telling it what to make i'm telling it here to make the program alphabetical now you've also probably seen something like check 50 i can run check 50 and this is the program itself check 50 i can hit enter and also i get a bit of a help message here but i also see the following arguments or inputs are required when i run check 50 the slug in this case is required and the slug refers to the problem of going to check something like cs50. But notice here how before i even run check50 i'm giving it some input some additional context to go off of to run as a program and we can do the very same thing for our own programs so for instance in mario when you first wrote it you might have done something a bit like this you might have run dot slash mario and then while the program was running prompted the user for a height in this case hand maybe you could do that with a height. You typed in 8 well in your actual a code you probably had something like this you had your int main void your main function in your program and you had some variable perhaps named height that received the value of get int after we finished running now we're going to transition here and make sure that we allow the user to actually give input before the program. Is even running so you can imagine mario being run like this mario space 8 so before mario even runs the user can tell us how high they want that pyramid to be and if you do something like this and you want to capture this input well you need to change your a code and it turns out you have to change it a little bit like this what do you notice that's different now we still have int and main. But what looks different now yes i'm seeing that void is replaced so before we had void inside parentheses but now we have what seems to be two different things int arc and string arg with some braces so let's go through first conceptually what's happening here so in our prior version of mario notice that when the user ran it they only ran slash void. Mario they didn't give any other input and that's actually reflected in our main function here you can think of the main function as being the function that represents our entire program the int tells us the exit status code if it's 0 that means all was of if it's non zero something bad happened but either way our program will return an integer now main is the name of this function kind of by convention. And here inside parentheses we see void our program or this function takes no arguments and we saw this above the user just typed dot slash mario but they didn't add any arguments but now if we change this the user actually types in an eight we have to change our a code to take some input now so our entire program now takes what seems to be a total of two arguments or two inputs one is called. So here we see that we have a string called arc which is of the type integer the other is called arg which is itself a string but actually not just a string an array of strings and notice here we see that array syntax coming back arg with the braces here that means arg is an array of strings and in fact we'll see it holds the arguments we actually give to our program so here let's take a look. Write a program here that prints each command line argument given to our program just to kind of practice and get a feel for what arc and arg can do so i'll go back to my terminal and i'll type code arg actually i'll just type code arg a and now inside of this we're going to get a sense for what these command line arguments are doing for us so i'll include let's say shah. I'll include standard to doth and now i'll type int main and not int main void and now i want my program to take some input at the command line i could say int arc and string arg to say my program now has access to something called arc which is a number and something called arg which is in this case an array of strings so now in particular arc is the number of arguments that my program received the number of. The actual name of the program itself so for instance if i go back to that mario example i type mario8 in that case arc would be equal to 2 i'm giving two inputs the name of my program and the number 8 now arg would itself have two strings inside one would be the name of my program and the other would be the input that i get from the program. I gave in this case 8 so let's try this i'll go back to my code here and i will try to loop through all the values in arg i'll say for int i equals a 0 i is less than how do i know how long arg is i can rely on arc i'll say arc then i and now i'll print out something like this arg percent i is percent i. And i'll fill this in with a few variables here i'm going to refer to arg bracket i so i'll substitute i in there and then i'll also substitute arg bracket i here so now i can see when i run this program i should be able to print out arg bracket zero is whatever arg bracket zero is arg bracket one is whatever arg bracket one is so now i'll go back and. And i'll try to compile this program i'll say in this case make arg i'll type arg and give it some input let's say 1 2 and 3 separated by spaces now i hit enter and i see my program had a total of four inputs the first was the actual name of my program so arg bracket 0 is equal to arg arg bracket 1 is 1 as we saw up here. So let me try this i could say arg i could even type in something like my name carter and now i see arg bracket 1 in my program arg bracket 1 is carter arg bracket 0 is back in my program here so to be clear arc then is the total number of arguments we get we can use it to figure out how long arg will be but all the interesting stuff all the actual information. Input to our program will be stored in arg as a set of strings so questions then on arc and arg what questions do we have. I actually see a good question which is asking we noticed that arg is storing a collection of strings but what if we wanted to get a number and use it in our program like in that mario example for instance so let's consider trying to re implement mario but now using command line arguments so what if i did this i can go back to my terminal and i'll type code mario a i'm not going to write the whole thing. But i will try to make it so that i'm able to run mario using command line arguments so instead of in this case running int main void i'll start off with int main int arc string arg and again this is allowing my program to take inputs at the command line and it will store them for me in this array called arg and it will tell me how many there are using arc. So let's try this i know i want to get the i know i want to allow the user to do this to say dot slash mario followed by eight for instance and now i'm curious to get this value of eight in which index of arg should i look based on what we saw earlier seems like arg bracketed. So keep in mind that dot slash mario that will be the value for arg bracket zero this value though will be the value for arg bracket one so now i'll try that i'll say well why don't i make a variable called height and say that it gets whatever is stored in arg bracket one i'll try it now i'll compile my program i'll go up top i'll say make mario i get an error and this isn't a particular reason. Helpful error but i do see this initializing int with an expression of type string so it seems like i'm not able to store a string inside of this variable i said was an integer so what could i do i have to first convert this value to an integer and it turns out there's a function for that one included in the not string a included in the. Standard library standard lib a gives me access to those functions and this function is called a2i a2i effectively converts any string to an integer assuming it's able to like if you give it one like the string one it will convert that to the integer one overall so i'll try this i'll say let's do make mario and now i don't get any errors so it seems like using a2i. I'm able to convert this argument which is previously a string into integer and now assign it to this value of height but now what if i do this what if i say make mario slash mario and i don't give any input i just hit enter why would i have gotten this error segmentation faults often occur. When i look beyond the bounds of my array why would typing just slash mario make me look beyond the bounds of my array in this case arg if i only type slash mario i think i really only have a value for arg let's see arc will be 1 which means that arg. And if i have a value of 1 i can't look beyond the bounds of arg so if i had only one element i could use arg bracket 0 but arg bracket 1 assumes i have two elements so here's another use case for arc i could first check before i do anything let me first check if arc does not equal 2 if there are any fewer or any more than two arguments to my program i want to do so. Something i want to tell the user that the usage of this program is dot slash mario followed by some number like this backslash a and then i'll return 1 meaning something went wrong not 0 you actually use this program incorrectly so that actually assures me that if i recompile my program now i do make mario dot slash mario i get this error instead of. I'm able to catch this error before my program actually runs as well so here again is our program what questions do we have on arc and arg a question here for again the summary of what arc and arg are in a single sentence arc is the number of inputs to our program at the command line and in a single sentence arc is the number of inputs to our program at the command line. Sentence arg is the array of strings the array of input to our program at the command line other questions too another question yeah good question here so the question is what counts as being at the command line and in general we say command line. We're also referring to this terminal here so when i type mario and include any options outside of this like 8 or my own name or so on that's at the command line and in lecture we saw this other program called cow say let me actually specify what kind of animal i want to say some kind of text i could say give me a dragon that says raw like this let me zoom out so you can see it here is that dragon so notice here in one. Single command i ran cow say but gave it some input dash of dragon means configure the animal i show to be a dragon and then raw is the other input that says what should the dragon be saying here down below all right other questions too all right. So seeing no additional questions here i think we'll go ahead and call this section a wrap thank you all so much for coming and joining us here we'll see you all next week