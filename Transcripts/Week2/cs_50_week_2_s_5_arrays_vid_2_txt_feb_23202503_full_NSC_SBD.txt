All right working with single variables is pretty fun but what if we want to work with a lot of variables but we don't want to have a bunch of different names flying around our code in this case arrays are going to come in really handy arrays are a really fundamental data structure for any programming language that you will use and they're really really useful particularly as we'll see in cs50 we use arrays to hold values of the same data type at contiguous memory locations. That is to say it's a way that we can group a bunch of integers together in memory or a bunch of characters or floats in memory really close together and work with them without having to give each one its own unique name which can get cumbersome after a little while now one way to analogized arrays is to think about your local post office for a second so step away from programming and just close your eyes and visualize in your mind your local post office usually in most post offices there's a large bank of post office boxes on the wall. An array is a giant block of contiguous memory the same way that a mail bank in your post office is a large space on the wall of the post office arrays have been partitioned into small identically sized blocks of space each of which is called an element in the same way that the wall at the post office has been partitioned into small identically sized blocks of space which we call a to box each element of the array can store a single array of. Certain amount of data just as each post office box is able to hold a certain amount of mail what can be stored in each element of the array is variables of the same data type such as int or char just like in your post office box you can only fit things of a similar type such as letters or small packages lastly we can access each element of the array directly by index number just as we can access our post office box by knowing its mailbox number. Hopefully that analogy helps you get your head around the idea of arrays by analog zing to something else that you are probably already familiar with in a the elements of an array are indexed starting from 0 not from 1 and this is really important and in fact this is why we in cs50 and why computer scientists frequently will count from 0 it's because of cos array indexing which always starts at 0 so if an array consists of a elements the first element of that array is located at. Index 0 and the last element of the array is located at index a minus 1 again if there's a elements in our array the last index is a minus 1 so if our array has 50 elements the first element is located at index 0 and the last element is located at index 49 unfortunately or fortunately depending on your perspective a is very lenient here it will not prevent you from going out of bounds of your array. Access the minus 3 element of your array or the 59th element of your array if your array only has 50 elements it won't stop your program from compiling but at run time you might encounter a dreaded segmentation fault if you start to access memory that is outside the bounds of what you asked your program to give you so do be careful what does an array declaration look like how do we code an array into existence like we code any other variable there are three parts to an array declaration. Type a name and a size this is very similar to a variable declaration which is just a type and a name the size element being the special case for an array because we are getting a bunch of them at the same time so the type is what kind of variable you want each element of the array to be do you want it to be an array of integers then your data type should be int do you want it to be an array of doubles or floats data type should be double or float the name is what you want to call your array what do you want to name this giant bank of integers. Or charts or doubles or whatever you have whatever have you what do you want to call it pretty self explanatory lastly size which goes inside of square brackets is how many elements you would like your array to contain how many integers do you want how many floats do you want so for example int student grades 40 this declares an array called student grades which consists of 40 integers pretty self explanatory i hope here's another example. This creates an array called men prices which consists of room in memory for eight doubles if you think of every element of an array of type data types so for example a single element of an array of type int the same way you would think of any other variable of type int all the familiar operations that we discussed previously in the operations video will make sense so here we could declare an array of boobies. Called truth table which consists of room for 10 boolean and then just like we could assign a value to any other variable of type boolean we could say something like truth table square bracket 2 which is how we indicate which element of the truth table the third element of the truth table because remember we're counting from 0 so that's how we indicate the third element of the truth table truth table 2 equals false just like we could declare or we could assign rather. Any boolean type variable to be false we can also use it in conditions if truth table 7 equals equals true which is to say if the eighth element of truth table is true maybe we want to print a message to the user print true and i could also just say truth table 10 equals true right well i can but it's pretty dangerous because remember we have an array of 10 boolean so the highest index the compiler has given us. Is 9 this program will compile but if something else in memory exists where we would expect truth table 10 to go we could suffer a segmentation fault we might get away with it but in general pretty dangerous so what i'm doing here is legal a but not necessarily the best move now when you declare and initialize an array simultaneously there's actually a pretty special syntax that you can use to fill up the array with its starting values it can get kind of cumbersome to declare an array of size 100. And then i have to say element 0 equals this element 1 equals this element 2 equals that what's the point right if it's a small array you could do something like this book truth table 3 equals open curly brace and then comma separate the list of elements that you want to put in the array then close curly brace semicolon this creates an array of size 3 called truth table with elements false true and true and in fact the instantiation syntax i have here is exactly the same. The same as doing the individual element syntax below these two ways of coding would produce the exact same array similarly we could iterate over all of the elements of an array using a loop which in fact is a very strongly recommended at home exercise how do you create an array of 100 integers where every element of the array is its index so for example we have an array of 100 integers and in the first element we want to put 0 and the second element we want to put 1. In the third element we want to put 2 and so on and so on that's a really good at home exercise to do that here it doesn't look like too much has changed but notice that in between the square brackets this time i've actually omitted the number if you're using this very special instantiation syntax to create an array you actually don't need to indicate the size of the array beforehand the compiler is smart enough to know that you actually want an array of size 3 because you put three elements to the right of the equation. Equal sign if you would put 4 it would have given you a truth table of size 4 and so on and so on arrays are not restricted to a single dimension which is pretty cool you can actually have as many size specifiers as you wish so for example if you want to create a board for the game battleship which if you've ever played is a game that is played with pegs on a 10 by 10 grid you could create an array like this you could say book battleship square bracket 10 close square bracket square bracket 10 close square bracket. You can choose to interpret this in your mind as a 10 by 10 grid of cells now in fact in memory it really does just remain a 100 element single dimensional array and this in fact goes for if you have three dimensions or four or five it really just does multiply all of the indices or all of the size specifiers together and you just get a one dimensional array of that size but in terms of organization and visualization and human perception it can be a lot easier to work with a grid if you're working. Game like tic tax toe or battleship or something like that it's a great abstraction instead of having to think about a tic tax toe board as a line of nine squares or a battleship board as a line of 100 squares a 10 by 10 grid or a 3 by 3 grid is probably a lot more easy to perceive now something really important about arrays we can treat each individual element of the array as a variable we saw that earlier when we were assigning the value true to certain boolean or testing. In conditionals but we can't treat entire arrays themselves as variables we cannot for example assign one array to another array using the assignment operator it's not legal a what we'd be doing in that example would be to copy one array into another if we want to do that we actually need to use a loop to copy over each individual element one at a time i know it's a little time consuming. This line of code or these couple lines of code would this work well no it wouldn't right because we're trying to assign foo to bar that's not going to work because it's an array and we just described that that's not legal a instead if we want to copy the contents of foo into bar which is what we're trying to do here we would need a syntax like this we have a for loop that goes from a is equal to 0 up to 5 and we increment a on every iteration of the loop and assign elements like that this would result in. Bar also being 1 2 3 4 5 but we have to do it this very slow element by element way instead of by just copying the entire array in other programming languages more modern ones you can in fact do just that simple equals syntax but see unfortunately we're not allowed to do that now there's one other thing i want to mention about arrays that can be a little bit tricky the first time that you work with them we discussed in a video about variable scope. That most variables in a when you call them in functions are passed by value do you remember what it means to pass something by value it means we're making a copy of the variable that's being passed in the called function the function that's receiving the variable doesn't get the variable itself it gets its own local copy of it to work with arrays of course do not follow this rule rather what we call this is passing by reference the called actually does. Receive the array it does not receive its own local copy of it and if you think about it this kind of makes sense if arrays are really large it takes so much time and effort to make a copy of an array of 100 or 1 000 or 10 000 elements that it's not worth it for a function to receive a copy of it do some work with it and then just kind of be done with the copy it doesn't need to have it hanging around anymore because arrays are so bulky and cumbersome we just pass them by reference we just trust that function to don't break anything. So it does actually get the array it doesn't get its own local copy of it so what does this mean then when the collie manipulates elements of the array what happens for now we'll gloss over why exactly this happens why arrays are passed by reference and everything else is passed by value but i promise you we will return and give you the answer to this in a later video here's one more exercise for you before we wrap up things on arrays there's a bunch of code here that's not particular. Good style just to be i'll make that caveat there's no comments in here which is pretty bad form but it's only because i wanted to be able to fit everything on the screen at the top you can see that i have two function declarations for set array and set int set array apparently takes an array of four integers as its input and set int apparently takes a single integer as its input but both of them don't have an output the return type of each one is void in main we have a couple of lines of code we declare. An integer variable called a and assign it the value 10 we declare an array of four integers called a and assign the elements 0 1 2 and 3 respectively then we have a call to set int and a call to set array the definitions of set array and set int are down below at the bottom and so again i ask you the question what gets printed out here at the end of main there's a print call i'm printing out two integers i'm printing out the contents of a and the contents of a squared bracket 0 pause the video here and take a minute. Can you figure out what this function will print at the end hopefully if you recall the distinction between passing by value and passing by reference this problem wasn't too tricky for you and the answer you would have found is this if you're not really sure as to why that's the case take a second go back review what i was just discussing about passing arrays by reference versus passing other variables by value and hopefully it'll make a little bit more sense i'm doug lloyd and this is cs50. You