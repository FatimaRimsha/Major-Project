All right so let's talk about command line arguments so so far in the course pretty much all of your programs have probably started like this int main void we've been collecting user input if we need it in our program such as the mario program for example by in program prompts we haven't needed to modify the declaration of main because instead inside of main we just say you may have called to get int. Do you want the pyramid to be or you make a call to get float how much change should i output to the user there is another way though and if we want our users to be able to provide data to our program at run time instead of while the program is running a subtle distinction but sometimes a very useful one we need a new form of declaring main we can't use int main void if we want to collect other data at the command line when the user runs their program hence command line arguments to collect these command line arguments from the user change your declaration of main. To look like this int main open parent int arc string arg square brackets and then open curly brace so what does that mean already well we are passing in two parameters or arguments or inputs to main one an integer called arc and the other is what it's an array of strings we see that square bracket notation. It's an array of strings it's not an individual string it's an array of strings and these two arguments arc and arg enable you to know what data the user has provided at the command line and how many things they provided at the command line pretty useful things to work with arc stands for argument count and you should know by the way that you could call arc whatever you wanted you can call arg whatever you wanted these are just conventional names that we use for them argument count and as we'll see in a second argument vector arg. But you don't have to call them arc and arg if you don't want to but conventionally that's what we do so anyway arc the argument count it's an integer type variable and so as you might expect if we have two things that we're going to be finding out what the user typed and how much stuff the user typed arc is going to tell us how much stuff the user typed so it gives you a number of command line arguments the user typed when the program was executed so if your program is run greedy and inside of your greedy program your main function has the declaration int main int arc. Then arc string arg square brackets then arc in that case is 1 now notice we don't count how many things the user typed after the program name the program name itself counts as a command line argument so greedy in that case arc is 1 if these are typed greedy 1024 cs50 at the command line arc in that case would be 3 and we know this because there's a lot of things that are. The way that the division between the strings is detected is whether there is a space or a tab or something like that between them so any amount of white space so called between the values typed at the command line indicates how many there are so greedy 10 24 cs50 arc in that case is 3 arg is the argument vector vector by the way is just another word for an array and this is an array that stores strings. One string per element which is the strings that the user actually typed at the command line when the program was executed now as is the case with any array if you recall from our discussion of arrays the first element of arg is always going to be found at arg square bracket 0 that's the first index of the arg array and in fact that will always be the name of the program it will always be located at arg square bracket 0. Is always found at arg square brackets arc minus 1 do you see why remember how many elements exist in this array well we know that it's arc number of elements if these are typed three things at the command line arc is 3 but because in a when we're working with arrays each element of the array or rather the indices of the array start at 0 if we have three elements of the array. In our array we have an element at argv0 an element at argv1 and an element at argv2 there is no element at argv3 in an array of size 3 so that's why the last element of arg can always be found at arg square brackets arc minus 1 so let's assume the user executes the greedy program as follows if they type at the command line greedy 1024 cs50 and for whatever reason we've already prepared our greedy program to. To know and work with these command line arguments we didn't previously when we worked on it for the greedy problem but let's say we've now modified it so that we do process the command line arguments in some way in this case argv0 is greedy what's argv1 well it's 1024 right it is 1024 but here's a really important distinction do you remember the data type of arg it stores strings right. It looks like 1024 is an integer value this is a really important distinction and is actually going to become something that you might encounter in later problems everything in arg is stored as a string so argv1's contents are the string 1024 consisting of those four characters it's as if the user typed 1024 as individual letters or characters it is not the integer 1024 and so you can't directly work with it. By saying int a equals argv1 minus 24 intuitively you might think of that as of well it's 1 024 minus 24 so a is equal to 1 000 but in fact that's not the case because argv1 is a string the string 1024 now there is a function that can be used to convert strings to integers i won't spoil it for you now but i'm sure zambia will be. Happy to tell you about it in the walk through for a future problem but you can also find problems like or excuse me functions that would do this in reference 50 if you go to the reference guide you can find a function that will make this conversion for you but again in the walk through for a future problem zamia will be happy to tell you what function it is that will convert the string 1024 to the integer 1024 all right so moving on we've covered argv0 we've covered argv1 what's in argv2 cs50 that ones probably pretty self explanatory. What's an argv3 well again we don't really know right we have an array of size 3 that's how many elements the user typed at the command line so if we go to argv3 we're now overstepping the bounds of our array the compiler will let us do this there's no intuitive problem with it but in terms of actually what's going to happen we don't really know it depends on what is located at the memory where argv3 would be expected to be and so we could end up getting away scot free. More likely than not particularly when working with arg as opposed to any other array that's in our program we're probably going to suffer a segmentation fault so again be sure not to overstep the bounds of your arrays particularly arg given its high degree of importance in your programs i'm doug lloyd this is cs50