All right so now let's tackle a really big topic functions so so far in the course all the programs that we've been writing have been written inside of main they're pretty simple programs you don't need to have all these branches and things going on we can just fit it all inside of main and it doesn't get terribly overwhelming but as the course goes on and as you begin to develop programs independently they're probably going to start to get a lot more than 10 or 15 lines you might get to hundreds or thousands or tens of thousands. Of lines of code and it's really not that crazy a thought as such it's probably not a good idea to keep everything inside of main it can get a little difficult to find what you're looking for if you do that fortunately though a and pretty much every other program in the language that you might work with allows us to write functions and i'm just going to take a quick aside here to mention that functions is one area of computer science and you'll see many more of them at various points throughout the course and if you continue on where there's. There's a lot of synonyms for the same word so we call them functions but you might also hear them referred to as procedures or methods particularly if you've ever done any object oriented programming before and don't worry if you haven't not a big deal but in object oriented languages they're frequently called methods sometimes they're called subroutines but they really all refer to the same basic idea let's see what that idea is what is a function well a function is really nothing more than a black box a black box that has a set of zero or more inputs. A single output so for example this might be a function this is a function called fun and it takes three inputs a a and a and inside that black box we don't know exactly what it does but it processes the inputs in some way and it gives us a single output in this case a now to make it a little less abstract we could say that maybe we have a function called add that takes three inputs a a and a and processes the output in some way inside the black box to process. Produce a single output so in this case if add takes 3 6 and 7 somewhere inside the add function we would expect them to be added together to produce the output which is 3 plus 6 plus 7 or 16 similarly you have a function called must that takes two inputs a and a processes them in some way such that the output of the function is the product of the two inputs the two inputs multiplied together 4 and 5 being passed into must something happens the output we expect is 20. Why do we call it a black box well if we aren't writing the functions ourselves which we've done quite a bit so far in cs50 we've seen print for example which is a function that we didn't write ourselves but we do use all the time if we aren't writing the functions ourselves we don't really need to know how it's actually implemented under the hood so for example the black box i just showed you for multiplication must a could be defined and this is just some pseudo code could be defined as output a times a that makes sense right if we have a function that's. That takes two inputs we would expect that the output would be the two inputs multiplied together a times a but must could also be implemented like this we could have a counter variable that gets set inside of must to 0 and then we repeat this process a times add a to counter so for example if we multiply 3a by 5b we could say set counter to 0 repeat 5 times add 3 to counter so we start at 0 and then we do this 5 times. 3 6 9 12 15 it's the same result we still get 3 times 5 just the implementation is different that's what we mean when we say a black box it just means we don't really care how it's implemented under the hood as long as the output is what we expect and in fact that's part of the contract of using functions particularly functions that others write the behavior is always going to be typical and predictable based on the name of the function and that's why it's really important when you write functions or when other people write functions that you might use. That those functions have clear relatively obvious names and are well documented which is certainly the case for a function like print so why do we use functions well as i said earlier if we write all of our code inside of main things can get really cumbersome and really complicated functions allow us the ability to organize things and break up a very complicated problem into a lot more manageable sub arts functions also allow us to simplify the coding process it's a lot easier to debug. A 10 line function versus a 100 line function or a 1 000 line function if we only have to debug small pieces at a time or write small pieces at a time it makes that programming experience a lot better trust me on that one lastly if we write functions we can reuse those various parts functions can be recycled they can be used in one program or another you've already written the function all you need to do is tell that program where to find that function we've been recycling and using print for over 40 years but it's only. Written one time it's pretty useful right all right so functions are great we know that now let's start writing them let's start getting them into our programs in order to do that the first thing we need to do is declare the function when you declare a function what you're basically doing is telling the compiler hey just so you know i am going to be writing a function later on and here's what it's going to look like the reason for this is because compilers can do some weird things if they see a set of symbols that they're not familiar with. Give the compiler a heads up i'm creating a function and it's going to do this function declarations generally if you're organizing your code in a way that others will be able to understand and make use of you generally want to put all of your function declarations at the very top of your code right before you start writing main even and conveniently there's a very standard form that every function declaration follows they all pretty much look like this there are three parts to a function declaration. Name and argument list now the return type is what kind of variable the function will output so for example if we think back a minute ago to the multiplying two numbers function what do we expect if we multiply an integer by an integer the output will be probably an integer right multiplying two integers together you get an integer so the return type of that function would be int name is what you want to call your function this is probably the least important part of the function declaration in terms of. But it's actually probably one of the most important parts of the function declaration in terms of knowing what the function actually does if you name your function for a or a or mystery or something like that you're probably going to get a little tripped up trying to remember what those functions do so it's important to give your functions meaningful names lastly argument list is the comma separated list of all the inputs to your function each of which has a type and a name so not only do you have to specify what type of variable the function will output you also have to specify what type of variable the function will output. We also want to specify what type and types of variables the function will be accepting as inputs so let's do an example here let's just take a look at a more concrete one so here's an example of a function declaration for a function that would add two integers together the sum of two integers is going to be an integer as well as we just discussed and so the return type here in green would be int that just tells us that add two its is going to at the end of the day output or back out to us an integer given what this function does. We want to give it a meaningful name add two its seems appropriate considering we're taking two integers as inputs and hopefully adding them together it might be a bit of a cumbersome name and frankly this function is probably not necessary since we have the addition operator if you recall from our discussion of operators previously but let's just say for the sake of argument that this function is useful and so we'll call it add two its lastly this function takes two inputs each of which is an integer so we have this comma separated list of inputs. Now we generally want to give a name to each of them so that they can be used within the function the names aren't terribly important in this case we don't necessarily have any meaning attached to them so we can just call them a and a that's totally fine if however you find yourself in a situation where the names of the variables might actually be important you might want to call them something other than a and a to give them something more symbolically meaningful but in this case we don't really know anything else about the function we just want to add two integers. Those integers a and ball right so that's one example why don't you take a second to think about this one how would you write a function declaration for a function that multiplies two floating point numbers do you remember what a floating point number is what would this function declaration look like i'd actually recommend that you pause the video here and take however much time you need really think about what this function declaration would be what would the return type be what would the meaningful name be what would the inputs be. Pause the video here and write up a function declaration for a function that would multiply two floating point numbers together all right hopefully you pause the video so let's take a look at an example of one possible declaration float must to reals float a floaty the product of two floating point numbers which recall how we represent real numbers or numbers with decimal values in a is going to be a floating point number when you multiply a decimal by a decimal you're probably going to get a decimal. We want to give it a relevant name multiply two reals seems fine but you could really call it must two floats or must floats anything like that as long as it gave some actual meaning to what this black box was going to do and again in this case we don't seem to have any meaning attached to the names of the variables we're passing in so we can just call them a and a now if you call them something else that's totally fine and in fact if you did this declaration instead using doubles instead of floats if you recall that doubles are a different way to more precisely specify. Real numbers or floating point variables that's totally fine too either one of those would be fine in fact there are several different combinations of ways to declare this function but these are two pretty good ones all right so we've declared a function that's great we've told the compiler what it is what we're going to be doing now it's actually write that function let's give it a definition so that inside the black box predictable behavior is happening and in fact we are multiplying two real numbers together or adding numbers together or doing whatever it is that we asked our function to do. So in fact let's try and define multiply two reals which we just talked about a second ago now the beginning of a function definition looks almost exactly the same as a function declaration and i have both of them here at the top is the function declaration type name comma separated argument list semicolon the semicolon indicates that that is a function declaration the beginning of the function definition looks almost exactly the same type name comma separated argument list. We can say we can declare a new variable of type float called product and assign that variable to the value a times a and then return product what does return mean here well return is the way we integrate. That's how we're passing the output back out so return something is the same as this is the output of the black box so that's how you do it here's another way to implement it we could just return a times a a is a floaty is a float so a times a is also a float we don't even need to create another variable so that's a different way to implement the exact same black box now take a moment pause the video again and try and define add to. Which is the other function that we talked about a moment ago again here i've put the function declaration ends with a semicolon and an open curly brace and a closed curly brace to indicate where we will fill in the contents of add2intz so that we define the predictable behavior inside the black box so pause the video and take as much time as you need to try and define an implementation of add2intz such that when the function outputs a value it does in fact return the sum of the two inputs. So just like the previous example there are several different ways that you could implement add points here's one and here in orange i've just had some comments i've just added some comments to indicate what's happening on each line of code so i declare a variable called sum of type int i say sum equals a plus a that's where i'm actually doing the work of adding a and a together and i return sum and that makes sense because sum is a variable of type int and what's the data type that this function tells me it's going to output. So i'm returning sum which is an integer variable and that makes sense given what we've declared and defined our function to do now you could also define the function this way int sum equals a plus a skip that first step and then return sum now you could also have implemented it this way which i highly do not recommend this is bad style for one thing and really bad design but it does in fact work if you take this code which is in bad adder dot a and you. It actually does add two integers together it's a very poor implementation of this particular behavior but it does work and it just adhered to illustrate the point that we don't really care what happens inside the black box as long as it has the output that we expect this is a poorly designed black box but at the end of the day it does still output the sum of a plus ball right so we've declared functions and we've defined functions so that's really good now let's start to use the function. Functions that we've declared and we defined to call a function it's actually pretty easy all you need to do is pass it appropriate arguments arguments of the data type that it expects and then assign the return value of that function to something of the correct type so let's have a look at this in practice in a file called adder1 a which i have in my cs50 de so here is adder1 a. At the beginning you see i have my includes pound include standard to and cs50 hand then i have my function declaration this is where i'm telling the compiler i'm going to be writing a function called add points it's going to output an integer type variable that's what this part is right here and then i have two inputs to it a and beach of which is an integer inside of main i ask the user for input by saying give me an integer and they are prompted to forget. Get int which is a function that is included in the cs50 library and that gets stored in a an integer variable then we prompt them for another integer we get another integer and store that in a and then here on line 28 is where we make our function call we are saying int a equals add to its by do you see why this makes sense a is an integer type variable and a is an integer type variable. That's good that makes sense with what our function declaration on line 17 looks like the comma separated input list expects two integers a and a in that case we can call them whatever we want it just expects two integers and a is an integer and a is an integer so that works and we know that that function is going to output an integer as well and so we are storing the output of the function add since in an integer type variable which we're calling a and then we can say the sum of percent i and percent i. Is percent i by and a respectively filling in those percent is what does the definition of add to its look like well it's pretty simple it's one of the ones we just saw a second ago int sum equals a plus a return sum does this work well let's save the file and then down here in my terminal i'm going to make adder 1 i'm going to clear my screen and i'm going to zoom in because i know it's a little difficult to see. So we compiled this program as adder1 so we can do adder1 give me an integer 10 give me another integer 20 the sum of 10 and 20 is 30 so we made a successful function call we can run the function again negative 10 17 the sum of negative 10 and 17 is 7 this function works it has the behavior that we expect it to. We've made a successful function definition declaration and a successful function call a couple of miscellaneous points about functions before we conclude this section recall from our discussion of data types previously that functions can sometimes take no inputs if that's the case we declare the function as having a void argument list do you recall what the most common function we've seen so far that takes a void argument list is it's main recall also that functions sometimes don't actually have an argument list. In that case we declare the function is having a void return type let's conclude this section by tackling a practice problem so here's the problem laid out i want you to write a function called valid triangle what this function should do is take three real numbers that represent the lengths of the three sides of a triangle as its parameters or its arguments or its inputs another set of synonyms that you might encounter this function should either output true or false. Depending on whether those three lengths are capable of making a triangle do you remember the data type that we used to indicate true or false now how do you implement this well know there are a couple of rules regarding triangles that are actually useful to know a triangle can only have sides with positive length that makes sense you're probably saying duh the other thing to note though is that the sum of the lengths of any two sides of the triangle has to be greater than the length of the third side that's actually true you can't have a triangle of sides with positive length. One two and four for example because one plus two is not greater than four so those are the rules that determine whether or not the three inputs can conceivably form a triangle so take a couple of minutes and declare and then define this function called valid triangle such that it actually has the behavior specified here it will output true if those three sides are capable of comprising a triangle and false otherwise. Ready to see how you did here's one implementation of valid triangle it's not the only one yours might vary slightly but this one does in fact have the behavior that we expect we declare our function at the very top book valid triangle float a floaty float a so again this function takes three real numbers as its arguments floating point variables and outputs a true or false value which is a boolean recall so that's why the return type is book then we define the function. First thing we do is check to make sure that all of the sides are positive if a is less than or equal to 0 or if a is less than or equal to 0 or if a is less than or equal to 0 that can't possibly be a triangle they don't have positive sides and so we can return false in that situation next we check to make sure that every pair of inputs is greater than the third one so if a plus a is less than or equal to a or if a plus a is less than or equal to a or if a plus a is less than or equal to a that's. Also can't be a valid triangle so we return false again assuming we passed both of the checks though then we can return true because those three sides are capable of returning of creating a valid triangle and that's it you've now declared and defined and you may be able to now use and call this function great job i'm doug lloyd this is cs50